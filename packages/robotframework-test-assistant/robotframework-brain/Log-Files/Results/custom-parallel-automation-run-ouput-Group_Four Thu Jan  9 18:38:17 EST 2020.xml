<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 3.1.2 (Python 3.7.5 on darwin)" generated="20200109 18:41:41.618" rpa="false">
<suite id="s1" name="Leon Robot Framework Assistant Combined Results Dashboard">
<suite id="s1-s1" name="Group_One Thu Jan  9 18:38:15 EST 2020">
<suite id="s1-s1-s1" name="Leon-Robot-Framework-Customizable-Parallel-Runner1" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner1.robot">
<test id="s1-s1-s1-t1" name="AUTOMATED CHECK 1 - PARALLEL RUNNER 1 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:38:15.909" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:38:15.907" endtime="20200109 18:38:15.910"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 1 - A hypothetical automated check - PARALLEL RUNNER 1</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:38:15.911" level="INFO">Starting process:
echo "AUTOMATED CHECK 1 - A hypothetical automated check - PARALLEL RUNNER 1 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:38:15.917" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:38:16.435" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:38:15.910" endtime="20200109 18:38:16.436"></status>
</kw>
<status status="PASS" starttime="20200109 18:38:15.910" endtime="20200109 18:38:16.436"></status>
</kw>
<tags>
<tag>Group_One</tag>
</tags>
<status status="PASS" starttime="20200109 18:38:15.906" endtime="20200109 18:38:16.437" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="531"></status>
</suite>
<suite id="s1-s1-s2" name="Leon-Robot-Framework-Customizable-Parallel-Runner2" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner2.robot">
<test id="s1-s1-s2-t1" name="AUTOMATED CHECK 1 - PARALLEL RUNNER 2 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:38:15.907" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:38:15.907" endtime="20200109 18:38:15.907"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 1 - A hypothetical automated check - PARALLEL RUNNER 2</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:38:15.910" level="INFO">Starting process:
echo "AUTOMATED CHECK 1 - A hypothetical automated check - PARALLEL RUNNER 2 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:38:15.917" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:38:16.435" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:38:15.910" endtime="20200109 18:38:16.436"></status>
</kw>
<status status="PASS" starttime="20200109 18:38:15.907" endtime="20200109 18:38:16.436"></status>
</kw>
<tags>
<tag>Group_One</tag>
</tags>
<status status="PASS" starttime="20200109 18:38:15.906" endtime="20200109 18:38:16.437" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="531"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="1062"></status>
</suite>
<suite id="s1-s2" name="Group_Three Thu Jan  9 18:38:19 EST 2020">
<suite id="s1-s2-s1" name="Leon-Robot-Framework-Customizable-Parallel-Runner1" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner1.robot">
<test id="s1-s2-s1-t1" name="AUTOMATED CHECK 3 - PARALLEL RUNNER 1 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:38:19.923" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:38:19.923" endtime="20200109 18:38:19.924"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 3 - A hypothetical automated check - PARALLEL RUNNER 1</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:38:19.925" level="INFO">Starting process:
echo "AUTOMATED CHECK 3 - A hypothetical automated check - PARALLEL RUNNER 1 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:38:19.929" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:38:20.342" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:38:19.924" endtime="20200109 18:38:20.343"></status>
</kw>
<status status="PASS" starttime="20200109 18:38:19.924" endtime="20200109 18:38:20.344"></status>
</kw>
<tags>
<tag>Group_Three</tag>
</tags>
<status status="PASS" starttime="20200109 18:38:19.923" endtime="20200109 18:38:20.344" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="421"></status>
</suite>
<suite id="s1-s2-s2" name="Leon-Robot-Framework-Customizable-Parallel-Runner2" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner2.robot">
<test id="s1-s2-s2-t1" name="AUTOMATED CHECK 3 - PARALLEL RUNNER 2 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:38:19.923" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:38:19.923" endtime="20200109 18:38:19.924"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 3 - A hypothetical automated check - PARALLEL RUNNER 2</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:38:19.925" level="INFO">Starting process:
echo "AUTOMATED CHECK 3 - A hypothetical automated check - PARALLEL RUNNER 2 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:38:19.929" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:38:20.342" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:38:19.924" endtime="20200109 18:38:20.343"></status>
</kw>
<status status="PASS" starttime="20200109 18:38:19.924" endtime="20200109 18:38:20.344"></status>
</kw>
<tags>
<tag>Group_Three</tag>
</tags>
<status status="PASS" starttime="20200109 18:38:19.923" endtime="20200109 18:38:20.344" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="421"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="842"></status>
</suite>
<suite id="s1-s3" name="Group_Two Thu Jan  9 18:38:13 EST 2020">
<suite id="s1-s3-s1" name="Leon-Robot-Framework-Customizable-Parallel-Runner1" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner1.robot">
<test id="s1-s3-s1-t1" name="AUTOMATED CHECK 2 - PARALLEL RUNNER 1 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:38:14.005" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:38:14.004" endtime="20200109 18:38:14.005"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 2 - A hypothetical automated check - PARALLEL RUNNER 1</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:38:14.006" level="INFO">Starting process:
echo "AUTOMATED CHECK 2 - A hypothetical automated check - PARALLEL RUNNER 1 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:38:14.010" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:38:14.319" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:38:14.005" endtime="20200109 18:38:14.319"></status>
</kw>
<status status="PASS" starttime="20200109 18:38:14.005" endtime="20200109 18:38:14.320"></status>
</kw>
<tags>
<tag>Group_Two</tag>
</tags>
<status status="PASS" starttime="20200109 18:38:14.004" endtime="20200109 18:38:14.320" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="316"></status>
</suite>
<suite id="s1-s3-s2" name="Leon-Robot-Framework-Customizable-Parallel-Runner2" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner2.robot">
<test id="s1-s3-s2-t1" name="AUTOMATED CHECK 2 - PARALLEL RUNNER 2 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:38:14.005" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:38:14.005" endtime="20200109 18:38:14.005"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 2 - A hypothetical automated check - PARALLEL RUNNER 2</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:38:14.006" level="INFO">Starting process:
echo "AUTOMATED CHECK 2 - A hypothetical automated check - PARALLEL RUNNER 2 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:38:14.010" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:38:14.319" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:38:14.006" endtime="20200109 18:38:14.319"></status>
</kw>
<status status="PASS" starttime="20200109 18:38:14.005" endtime="20200109 18:38:14.320"></status>
</kw>
<tags>
<tag>Group_Two</tag>
</tags>
<status status="PASS" starttime="20200109 18:38:14.005" endtime="20200109 18:38:14.321" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="316"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="632"></status>
</suite>
<suite id="s1-s4" name="Robot Framework automation run in a manually constructed sequence set up through leon-ai with a CustomSerialAutomationRunnerFile.csv file">
<suite id="s1-s4-s1" name="Check_One Thu Jan  9 18:33:16 EST 2020" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s4-s1-t1" name="AUTOMATED CHECK 1 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:33:16.596" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:33:16.596" endtime="20200109 18:33:16.596"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 1 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:33:16.598" level="INFO">Starting process:
echo "AUTOMATED CHECK 1 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:33:16.602" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:33:16.807" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:33:16.597" endtime="20200109 18:33:16.807"></status>
</kw>
<status status="PASS" starttime="20200109 18:33:16.597" endtime="20200109 18:33:16.808"></status>
</kw>
<tags>
<tag>Check_One</tag>
</tags>
<status status="PASS" starttime="20200109 18:33:16.595" endtime="20200109 18:33:16.808" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="213"></status>
</suite>
<suite id="s1-s4-s2" name="Check_Three Thu Jan  9 18:33:13 EST 2020" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s4-s2-t1" name="AUTOMATED CHECK 3 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:33:13.320" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:33:13.320" endtime="20200109 18:33:13.320"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 3 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:33:13.321" level="INFO">Starting process:
echo "AUTOMATED CHECK 3 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:33:13.326" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:33:13.535" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:33:13.321" endtime="20200109 18:33:13.535"></status>
</kw>
<status status="PASS" starttime="20200109 18:33:13.320" endtime="20200109 18:33:13.536"></status>
</kw>
<tags>
<tag>Check_Three</tag>
</tags>
<status status="PASS" starttime="20200109 18:33:13.319" endtime="20200109 18:33:13.536" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="217"></status>
</suite>
<suite id="s1-s4-s3" name="Check_Two Thu Jan  9 18:33:14 EST 2020" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s4-s3-t1" name="AUTOMATED CHECK 2 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:33:14.412" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:33:14.412" endtime="20200109 18:33:14.412"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 2 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:33:14.413" level="INFO">Starting process:
echo "AUTOMATED CHECK 2 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:33:14.418" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:33:14.623" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:33:14.412" endtime="20200109 18:33:14.624"></status>
</kw>
<status status="PASS" starttime="20200109 18:33:14.412" endtime="20200109 18:33:14.624"></status>
</kw>
<tags>
<tag>Check_Two</tag>
</tags>
<status status="PASS" starttime="20200109 18:33:14.411" endtime="20200109 18:33:14.625" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="214"></status>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="644"></status>
</suite>
<suite id="s1-s5" name="Check_One Thu Jan  9 18:33:16 EST 2020" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s5-t1" name="AUTOMATED CHECK 1 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:33:16.596" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:33:16.596" endtime="20200109 18:33:16.596"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 1 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:33:16.598" level="INFO">Starting process:
echo "AUTOMATED CHECK 1 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:33:16.602" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:33:16.807" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:33:16.597" endtime="20200109 18:33:16.807"></status>
</kw>
<status status="PASS" starttime="20200109 18:33:16.597" endtime="20200109 18:33:16.808"></status>
</kw>
<tags>
<tag>Check_One</tag>
</tags>
<status status="PASS" starttime="20200109 18:33:16.595" endtime="20200109 18:33:16.808" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="213"></status>
</suite>
<suite id="s1-s6" name="Check_Three Thu Jan  9 18:33:13 EST 2020" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s6-t1" name="AUTOMATED CHECK 3 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:33:13.320" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:33:13.320" endtime="20200109 18:33:13.320"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 3 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:33:13.321" level="INFO">Starting process:
echo "AUTOMATED CHECK 3 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:33:13.326" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:33:13.535" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:33:13.321" endtime="20200109 18:33:13.535"></status>
</kw>
<status status="PASS" starttime="20200109 18:33:13.320" endtime="20200109 18:33:13.536"></status>
</kw>
<tags>
<tag>Check_Three</tag>
</tags>
<status status="PASS" starttime="20200109 18:33:13.319" endtime="20200109 18:33:13.536" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="217"></status>
</suite>
<suite id="s1-s7" name="Check_Two Thu Jan  9 18:33:14 EST 2020" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s7-t1" name="AUTOMATED CHECK 2 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20200109 18:33:14.412" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20200109 18:33:14.412" endtime="20200109 18:33:14.412"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 2 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:33:14.413" level="INFO">Starting process:
echo "AUTOMATED CHECK 2 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:33:14.418" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:33:14.623" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:33:14.412" endtime="20200109 18:33:14.624"></status>
</kw>
<status status="PASS" starttime="20200109 18:33:14.412" endtime="20200109 18:33:14.624"></status>
</kw>
<tags>
<tag>Check_Two</tag>
</tags>
<status status="PASS" starttime="20200109 18:33:14.411" endtime="20200109 18:33:14.625" critical="yes"></status>
</test>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="214"></status>
</suite>
<suite id="s1-s8" name="Robot Framework Desktop Web Browser Test Run">
<suite id="s1-s8-s1" name="Desktop-Example-Chrome" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Tests/Workshop-Part-Two/Desktop-Example-Chrome.robot">
<kw name="Open Chrome Browser To Specified URL" type="setup">
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${URL}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200109 18:33:23.757" level="INFO">Opening browser 'Chrome' to base url 'http://owasp-goat-app.herokuapp.com/login'.</msg>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20200109 18:33:23.789" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<status status="PASS" starttime="20200109 18:33:23.788" endtime="20200109 18:33:23.789"></status>
</kw>
<msg timestamp="20200109 18:33:23.794" level="FAIL">WebDriverException: Message: 'chromedriver' executable may have wrong permissions. Please see https://sites.google.com/a/chromium.org/chromedriver/home
</msg>
<status status="FAIL" starttime="20200109 18:33:23.757" endtime="20200109 18:33:23.794"></status>
</kw>
<status status="FAIL" starttime="20200109 18:33:23.757" endtime="20200109 18:33:23.794"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="teardown">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200109 18:33:23.797" endtime="20200109 18:33:23.797"></status>
</kw>
<test id="s1-s8-s1-t1" name="Go to the sign up page from the login page.">
<tags>
<tag>Desktop Chrome</tag>
</tags>
<status status="FAIL" starttime="20200109 18:33:23.794" endtime="20200109 18:33:23.795" critical="yes">Parent suite setup failed:
WebDriverException: Message: 'chromedriver' executable may have wrong permissions. Please see https://sites.google.com/a/chromium.org/chromedriver/home
</status>
</test>
<test id="s1-s8-s1-t2" name="Quickly check that the sign up page loaded.">
<tags>
<tag>Desktop Chrome</tag>
</tags>
<status status="FAIL" starttime="20200109 18:33:23.796" endtime="20200109 18:33:23.796" critical="yes">Parent suite setup failed:
WebDriverException: Message: 'chromedriver' executable may have wrong permissions. Please see https://sites.google.com/a/chromium.org/chromedriver/home
</status>
</test>
<doc>Simple example using SeleniumLibrary.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="38">Suite setup failed:
WebDriverException: Message: 'chromedriver' executable may have wrong permissions. Please see https://sites.google.com/a/chromium.org/chromedriver/home
</status>
</suite>
<suite id="s1-s8-s2" name="Desktop-Example-Firefox" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Tests/Workshop-Part-Two/Desktop-Example-Firefox.robot">
<kw name="Open Firefox Browser To Specified URL" type="setup">
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${URL}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200109 18:33:23.757" level="INFO">Opening browser 'Firefox' to base url 'http://owasp-goat-app.herokuapp.com/login'.</msg>
<msg timestamp="20200109 18:33:23.759" level="INFO">Firefox driver log is always forced to to: /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Workshop-Part-Three/pabot_results/Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox/geckodriver-1.log</msg>
<status status="PASS" starttime="20200109 18:33:23.757" endtime="20200109 18:35:05.622"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200109 18:35:05.623" endtime="20200109 18:35:05.627"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${RETRY_AMOUNT}x</arg>
<arg>0.1s</arg>
<arg>Wait Until Page Contains</arg>
<arg>Password</arg>
<arg>0.5s</arg>
</arguments>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<doc>Waits until ``text`` appears on the current page.</doc>
<arguments>
<arg>Password</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20200109 18:35:05.628" endtime="20200109 18:35:05.678"></status>
</kw>
<status status="PASS" starttime="20200109 18:35:05.627" endtime="20200109 18:35:05.679"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200109 18:35:05.679" endtime="20200109 18:35:05.683"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20200109 18:35:07.685" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20200109 18:35:05.684" endtime="20200109 18:35:07.686"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20200109 18:35:07.879" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-1.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20200109 18:35:07.686" endtime="20200109 18:35:07.879"></status>
</kw>
<status status="PASS" starttime="20200109 18:33:23.757" endtime="20200109 18:35:07.880"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="teardown">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200109 18:38:10.735" endtime="20200109 18:38:11.066"></status>
</kw>
<test id="s1-s8-s2-t1" name="Go to the sign up page from the login page.">
<kw name="Click Sign Up Link" library="Selenium-Desktop-Resources">
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200109 18:35:07.882" endtime="20200109 18:35:07.885"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20200109 18:35:08.019" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-2.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-2.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20200109 18:35:07.885" endtime="20200109 18:35:08.019"></status>
</kw>
<kw name="Click Link" library="SeleniumLibrary">
<doc>Clicks a link identified by ``locator``.</doc>
<arguments>
<arg>//a[@href="/signup"]</arg>
</arguments>
<msg timestamp="20200109 18:35:08.019" level="INFO">Clicking link '//a[@href="/signup"]'.</msg>
<status status="PASS" starttime="20200109 18:35:08.019" endtime="20200109 18:38:08.558"></status>
</kw>
<status status="PASS" starttime="20200109 18:35:07.882" endtime="20200109 18:38:08.558"></status>
</kw>
<tags>
<tag>Desktop Firefox</tag>
</tags>
<status status="PASS" starttime="20200109 18:35:07.880" endtime="20200109 18:38:08.559" critical="yes"></status>
</test>
<test id="s1-s8-s2-t2" name="Quickly check that the sign up page loaded.">
<kw name="Check The Sign Up Page" library="Selenium-Desktop-Resources">
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200109 18:38:08.562" endtime="20200109 18:38:08.570"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${RETRY_AMOUNT}x</arg>
<arg>0.1 sec</arg>
<arg>Wait Until Page Contains</arg>
<arg>information</arg>
<arg>0.5s</arg>
</arguments>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<doc>Waits until ``text`` appears on the current page.</doc>
<arguments>
<arg>information</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20200109 18:38:08.570" endtime="20200109 18:38:08.579"></status>
</kw>
<status status="PASS" starttime="20200109 18:38:08.570" endtime="20200109 18:38:08.579"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200109 18:38:08.579" endtime="20200109 18:38:08.583"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20200109 18:38:10.585" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20200109 18:38:08.583" endtime="20200109 18:38:10.585"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20200109 18:38:10.734" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-3.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-3.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20200109 18:38:10.585" endtime="20200109 18:38:10.734"></status>
</kw>
<status status="PASS" starttime="20200109 18:38:08.562" endtime="20200109 18:38:10.734"></status>
</kw>
<tags>
<tag>Desktop Firefox</tag>
</tags>
<status status="PASS" starttime="20200109 18:38:08.561" endtime="20200109 18:38:10.734" critical="yes"></status>
</test>
<doc>Simple example using SeleniumLibrary.</doc>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="287306"></status>
</suite>
<suite id="s1-s8-s3" name="Desktop-Example-Safari" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Tests/Workshop-Part-Two/Desktop-Example-Safari.robot">
<kw name="Open Safari Browser To Specified URL" type="setup">
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${URL}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200109 18:33:23.774" level="INFO">Opening browser 'Safari' to base url 'http://owasp-goat-app.herokuapp.com/login'.</msg>
<status status="PASS" starttime="20200109 18:33:23.774" endtime="20200109 18:34:52.192"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200109 18:34:52.193" endtime="20200109 18:34:52.196"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${RETRY_AMOUNT}x</arg>
<arg>0.1s</arg>
<arg>Wait Until Page Contains</arg>
<arg>Password</arg>
<arg>0.5s</arg>
</arguments>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<doc>Waits until ``text`` appears on the current page.</doc>
<arguments>
<arg>Password</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20200109 18:34:52.199" endtime="20200109 18:34:52.290"></status>
</kw>
<status status="PASS" starttime="20200109 18:34:52.197" endtime="20200109 18:34:52.290"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200109 18:34:52.290" endtime="20200109 18:34:52.292"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20200109 18:34:54.293" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20200109 18:34:52.292" endtime="20200109 18:34:54.293"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20200109 18:34:54.357" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-1.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20200109 18:34:54.293" endtime="20200109 18:34:54.357"></status>
</kw>
<status status="PASS" starttime="20200109 18:33:23.774" endtime="20200109 18:34:54.357"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="teardown">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200109 18:35:15.058" endtime="20200109 18:35:15.107"></status>
</kw>
<test id="s1-s8-s3-t1" name="Go to the sign up page from the login page.">
<kw name="Click Sign Up Link" library="Selenium-Desktop-Resources">
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200109 18:34:54.359" endtime="20200109 18:34:54.362"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20200109 18:34:54.411" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-2.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-2.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20200109 18:34:54.363" endtime="20200109 18:34:54.411"></status>
</kw>
<kw name="Click Link" library="SeleniumLibrary">
<doc>Clicks a link identified by ``locator``.</doc>
<arguments>
<arg>//a[@href="/signup"]</arg>
</arguments>
<msg timestamp="20200109 18:34:54.412" level="INFO">Clicking link '//a[@href="/signup"]'.</msg>
<status status="PASS" starttime="20200109 18:34:54.411" endtime="20200109 18:34:54.449"></status>
</kw>
<status status="PASS" starttime="20200109 18:34:54.359" endtime="20200109 18:34:54.449"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 18:34:54.450" endtime="20200109 18:34:54.450"></status>
</kw>
<status status="PASS" starttime="20200109 18:34:54.450" endtime="20200109 18:34:54.450"></status>
</kw>
<tags>
<tag>Desktop Safari</tag>
</tags>
<status status="PASS" starttime="20200109 18:34:54.358" endtime="20200109 18:34:54.450" critical="yes"></status>
</test>
<test id="s1-s8-s3-t2" name="Quickly check that the sign up page loaded.">
<kw name="Check The Sign Up Page Demonstrate Failure">
<kw name="Page Should Contain" library="SeleniumLibrary">
<doc>Verifies that current page contains ``text``.</doc>
<arguments>
<arg>THIS SHOULD FAIL</arg>
</arguments>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20200109 18:35:14.527" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-3.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-3.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20200109 18:35:14.472" endtime="20200109 18:35:14.528"></status>
</kw>
<msg timestamp="20200109 18:35:14.533" level="FAIL">Page should have contained text 'THIS SHOULD FAIL' but did not.</msg>
<status status="FAIL" starttime="20200109 18:34:54.452" endtime="20200109 18:35:14.533"></status>
</kw>
<status status="FAIL" starttime="20200109 18:34:54.451" endtime="20200109 18:35:14.533"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email For Desktop Browser Check">
<arguments>
<arg>desktop Safari checks in the Desktop-Safari.robot file</arg>
<arg>Prod</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config ${EXECDIR}/Workshop-Examples/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 18:35:14.535" level="INFO">Starting process:
echo "The desktop Safari checks in the Desktop-Safari.robot file failed in the Prod environment." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 18:35:14.541" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 18:35:15.052" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 18:35:14.534" endtime="20200109 18:35:15.053"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 18:35:15.053" endtime="20200109 18:35:15.054"></status>
</kw>
<status status="PASS" starttime="20200109 18:35:14.534" endtime="20200109 18:35:15.054"></status>
</kw>
<status status="PASS" starttime="20200109 18:35:14.534" endtime="20200109 18:35:15.055"></status>
</kw>
<status status="PASS" starttime="20200109 18:35:14.534" endtime="20200109 18:35:15.055"></status>
</kw>
<status status="PASS" starttime="20200109 18:35:14.533" endtime="20200109 18:35:15.056"></status>
</kw>
<tags>
<tag>Desktop Safari</tag>
</tags>
<status status="FAIL" starttime="20200109 18:34:54.451" endtime="20200109 18:35:15.056" critical="yes">Page should have contained text 'THIS SHOULD FAIL' but did not.</status>
</test>
<doc>Simple example using SeleniumLibrary.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="111329"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 3 executions.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="398673"></status>
</suite>
<suite id="s1-s9" name="Robot Framework test run with user-created Python Library in parallel">
<suite id="s1-s9-s1" name="Docker-Example-Python-Library1-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library1-Enhanced-Version.robot">
<test id="s1-s9-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:29.733" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:29.479" endtime="20200109 23:41:29.733"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.734" endtime="20200109 23:41:29.735"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.735" endtime="20200109 23:41:29.736"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.736" endtime="20200109 23:41:29.737"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.737" endtime="20200109 23:41:29.738"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.739" endtime="20200109 23:41:29.740"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.740" endtime="20200109 23:41:29.741"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.741" endtime="20200109 23:41:29.742"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.742" endtime="20200109 23:41:29.743"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.743" endtime="20200109 23:41:29.744"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.744" endtime="20200109 23:41:29.745"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.745" endtime="20200109 23:41:29.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:29.746" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:29.746" endtime="20200109 23:41:29.747"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.747" endtime="20200109 23:41:29.747"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.748" endtime="20200109 23:41:29.748"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:29.748" endtime="20200109 23:41:29.749"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:29.478" endtime="20200109 23:41:29.749" critical="yes"></status>
</test>
<test id="s1-s9-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:30.232" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:29.753" endtime="20200109 23:41:30.232"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.232" endtime="20200109 23:41:30.234"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.234" endtime="20200109 23:41:30.236"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.236" endtime="20200109 23:41:30.237"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.238" endtime="20200109 23:41:30.239"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.239" endtime="20200109 23:41:30.240"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.241" endtime="20200109 23:41:30.242"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.242" endtime="20200109 23:41:30.243"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.243" endtime="20200109 23:41:30.244"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.244" endtime="20200109 23:41:30.245"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.245" endtime="20200109 23:41:30.246"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.246" endtime="20200109 23:41:30.247"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200109 23:41:30.248" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:30.247" endtime="20200109 23:41:30.248"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.248" endtime="20200109 23:41:30.249"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 23:41:30.249" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" starttime="20200109 23:41:30.249" endtime="20200109 23:41:30.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20200109 23:41:30.250" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:30.250" endtime="20200109 23:41:30.250"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.251" endtime="20200109 23:41:30.251"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:30.250" endtime="20200109 23:41:30.251"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:29.751" endtime="20200109 23:41:30.251" critical="yes"></status>
</test>
<test id="s1-s9-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:30.437" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:30.254" endtime="20200109 23:41:30.437"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.437" endtime="20200109 23:41:30.439"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.439" endtime="20200109 23:41:30.441"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.441" endtime="20200109 23:41:30.442"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.442" endtime="20200109 23:41:30.444"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.444" endtime="20200109 23:41:30.445"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.446" endtime="20200109 23:41:30.447"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.447" endtime="20200109 23:41:30.448"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.449" endtime="20200109 23:41:30.450"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.450" endtime="20200109 23:41:30.451"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.451" endtime="20200109 23:41:30.452"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.452" endtime="20200109 23:41:30.454"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:30.455" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200109 23:41:30.455" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200109 23:41:30.455" endtime="20200109 23:41:30.455"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 23:41:30.458" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 23:41:30.462" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 23:41:30.665" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 23:41:30.457" endtime="20200109 23:41:30.666"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 23:41:30.666" endtime="20200109 23:41:30.667"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:30.457" endtime="20200109 23:41:30.667"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:30.457" endtime="20200109 23:41:30.668"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:30.456" endtime="20200109 23:41:30.668"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:30.456" endtime="20200109 23:41:30.669"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 23:41:30.253" endtime="20200109 23:41:30.669" critical="yes">200 == 200</status>
</test>
<test id="s1-s9-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:31.035" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:30.673" endtime="20200109 23:41:31.035"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.036" endtime="20200109 23:41:31.037"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.037" endtime="20200109 23:41:31.038"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.038" endtime="20200109 23:41:31.039"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.039" endtime="20200109 23:41:31.039"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.040" endtime="20200109 23:41:31.041"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.041" endtime="20200109 23:41:31.042"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.042" endtime="20200109 23:41:31.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:31.043" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:31.043" endtime="20200109 23:41:31.044"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200109 23:41:31.044" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200109 23:41:31.044" endtime="20200109 23:41:31.044"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.045" endtime="20200109 23:41:31.045"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:31.044" endtime="20200109 23:41:31.045"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:30.671" endtime="20200109 23:41:31.046" critical="yes"></status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1562"></status>
</suite>
<suite id="s1-s9-s2" name="Docker-Example-Python-Library2-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library2-Enhanced-Version.robot">
<test id="s1-s9-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:29.730" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:29.479" endtime="20200109 23:41:29.730"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.731" endtime="20200109 23:41:29.732"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.733" endtime="20200109 23:41:29.734"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.735" endtime="20200109 23:41:29.736"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.736" endtime="20200109 23:41:29.737"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.737" endtime="20200109 23:41:29.738"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.738" endtime="20200109 23:41:29.740"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:29.740" endtime="20200109 23:41:29.741"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:29.742" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200109 23:41:29.742" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200109 23:41:29.741" endtime="20200109 23:41:29.742"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 23:41:29.745" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 23:41:29.751" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 23:41:30.156" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 23:41:29.745" endtime="20200109 23:41:30.157"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 23:41:30.158" endtime="20200109 23:41:30.159"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:29.744" endtime="20200109 23:41:30.159"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:29.744" endtime="20200109 23:41:30.160"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:29.743" endtime="20200109 23:41:30.160"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:29.743" endtime="20200109 23:41:30.160"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 23:41:29.478" endtime="20200109 23:41:30.160" critical="yes">200 == 200</status>
</test>
<test id="s1-s9-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:30.235" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:30.167" endtime="20200109 23:41:30.235"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.235" endtime="20200109 23:41:30.236"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.237" endtime="20200109 23:41:30.238"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.238" endtime="20200109 23:41:30.239"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.239" endtime="20200109 23:41:30.240"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.241" endtime="20200109 23:41:30.242"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.242" endtime="20200109 23:41:30.243"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.243" endtime="20200109 23:41:30.244"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.244" endtime="20200109 23:41:30.245"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.245" endtime="20200109 23:41:30.246"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.246" endtime="20200109 23:41:30.247"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.247" endtime="20200109 23:41:30.248"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:30.249" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:30.248" endtime="20200109 23:41:30.249"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.249" endtime="20200109 23:41:30.250"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.250" endtime="20200109 23:41:30.250"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.251" endtime="20200109 23:41:30.251"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:30.251" endtime="20200109 23:41:30.252"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:30.165" endtime="20200109 23:41:30.252" critical="yes"></status>
</test>
<test id="s1-s9-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:30.617" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:30.254" endtime="20200109 23:41:30.617"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.617" endtime="20200109 23:41:30.618"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.619" endtime="20200109 23:41:30.620"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.620" endtime="20200109 23:41:30.621"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.621" endtime="20200109 23:41:30.622"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.622" endtime="20200109 23:41:30.623"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.624" endtime="20200109 23:41:30.624"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.625" endtime="20200109 23:41:30.625"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.626" endtime="20200109 23:41:30.626"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.627" endtime="20200109 23:41:30.627"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.627" endtime="20200109 23:41:30.628"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.628" endtime="20200109 23:41:30.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:30.629" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:30.629" endtime="20200109 23:41:30.629"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.630" endtime="20200109 23:41:30.630"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:30.631" endtime="20200109 23:41:30.631"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:30.630" endtime="20200109 23:41:30.631"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:30.253" endtime="20200109 23:41:30.631" critical="yes"></status>
</test>
<test id="s1-s9-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:31.025" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:30.633" endtime="20200109 23:41:31.025"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.025" endtime="20200109 23:41:31.026"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.027" endtime="20200109 23:41:31.028"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.029" endtime="20200109 23:41:31.030"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.030" endtime="20200109 23:41:31.031"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.031" endtime="20200109 23:41:31.032"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.032" endtime="20200109 23:41:31.033"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.034" endtime="20200109 23:41:31.035"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.035" endtime="20200109 23:41:31.036"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.036" endtime="20200109 23:41:31.037"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.037" endtime="20200109 23:41:31.038"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.038" endtime="20200109 23:41:31.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:31.039" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:31.039" endtime="20200109 23:41:31.039"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.039" endtime="20200109 23:41:31.040"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 23:41:31.041" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" starttime="20200109 23:41:31.040" endtime="20200109 23:41:31.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20200109 23:41:31.042" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:31.042" endtime="20200109 23:41:31.042"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:31.043" endtime="20200109 23:41:31.043"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:31.043" endtime="20200109 23:41:31.044"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:30.632" endtime="20200109 23:41:31.044" critical="yes"></status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1559"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<metadata>
<item name="Randomized">Suites and tests (seed 8807987022437301915)</item>
</metadata>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="3121"></status>
</suite>
<suite id="s1-s10" name="Robot Framework test run with user-created Python Library in parallel">
<suite id="s1-s10-s1" name="Docker-Example-Python-Library1-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library1-Enhanced-Version.robot">
<test id="s1-s10-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:53.166" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f3cd5c14438&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:53.150" endtime="20200109 22:05:53.166"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:53.168" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:53.174" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:53.276" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:53.168" endtime="20200109 22:05:53.277"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:53.278" endtime="20200109 22:05:53.278"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.168" endtime="20200109 22:05:53.279"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.167" endtime="20200109 22:05:53.279"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.167" endtime="20200109 22:05:53.279"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.167" endtime="20200109 22:05:53.280"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:53.148" endtime="20200109 22:05:53.280" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f3cd5c14438&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s10-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:53.297" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f3cd59e0e80&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:53.289" endtime="20200109 22:05:53.298"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:53.301" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:53.305" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:53.407" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:53.300" endtime="20200109 22:05:53.407"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:53.408" endtime="20200109 22:05:53.409"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.300" endtime="20200109 22:05:53.410"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.300" endtime="20200109 22:05:53.410"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.299" endtime="20200109 22:05:53.410"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.299" endtime="20200109 22:05:53.411"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:53.286" endtime="20200109 22:05:53.411" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f3cd59e0e80&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s10-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:53.429" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f3cd536c438&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:53.417" endtime="20200109 22:05:53.429"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:53.436" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:53.440" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:53.542" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:53.435" endtime="20200109 22:05:53.542"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:53.544" endtime="20200109 22:05:53.544"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.435" endtime="20200109 22:05:53.545"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.434" endtime="20200109 22:05:53.545"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.434" endtime="20200109 22:05:53.545"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.429" endtime="20200109 22:05:53.546"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:53.414" endtime="20200109 22:05:53.546" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f3cd536c438&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s10-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:53.562" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f3cd5374780&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:53.552" endtime="20200109 22:05:53.562"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:53.569" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:53.574" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:53.676" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:53.568" endtime="20200109 22:05:53.677"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:53.679" endtime="20200109 22:05:53.680"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.568" endtime="20200109 22:05:53.680"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.568" endtime="20200109 22:05:53.681"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.567" endtime="20200109 22:05:53.681"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.563" endtime="20200109 22:05:53.682"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:53.549" endtime="20200109 22:05:53.682" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f3cd5374780&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="522"></status>
</suite>
<suite id="s1-s10-s2" name="Docker-Example-Python-Library2-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library2-Enhanced-Version.robot">
<test id="s1-s10-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:53.166" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f8aeb0c8518&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:53.150" endtime="20200109 22:05:53.166"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:53.168" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:53.174" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:53.276" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:53.168" endtime="20200109 22:05:53.277"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:53.278" endtime="20200109 22:05:53.278"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.168" endtime="20200109 22:05:53.279"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.167" endtime="20200109 22:05:53.279"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.167" endtime="20200109 22:05:53.279"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.167" endtime="20200109 22:05:53.280"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:53.149" endtime="20200109 22:05:53.280" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f8aeb0c8518&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s10-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:53.297" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f8aeae96fd0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:53.288" endtime="20200109 22:05:53.298"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:53.301" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:53.305" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:53.407" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:53.300" endtime="20200109 22:05:53.407"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:53.408" endtime="20200109 22:05:53.409"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.300" endtime="20200109 22:05:53.410"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.300" endtime="20200109 22:05:53.410"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.299" endtime="20200109 22:05:53.410"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.299" endtime="20200109 22:05:53.410"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:53.286" endtime="20200109 22:05:53.411" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f8aeae96fd0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s10-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:53.428" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f8aea8233c8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:53.417" endtime="20200109 22:05:53.428"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:53.432" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:53.437" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:53.539" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:53.431" endtime="20200109 22:05:53.540"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:53.540" endtime="20200109 22:05:53.542"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.430" endtime="20200109 22:05:53.542"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.430" endtime="20200109 22:05:53.543"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.430" endtime="20200109 22:05:53.543"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.428" endtime="20200109 22:05:53.543"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:53.414" endtime="20200109 22:05:53.544" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f8aea8233c8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s10-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:53.562" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f8aea8297b8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:53.551" endtime="20200109 22:05:53.562"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:53.569" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:53.573" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:53.676" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:53.568" endtime="20200109 22:05:53.677"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:53.679" endtime="20200109 22:05:53.680"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.568" endtime="20200109 22:05:53.680"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.568" endtime="20200109 22:05:53.681"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.567" endtime="20200109 22:05:53.681"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:53.563" endtime="20200109 22:05:53.681"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:53.548" endtime="20200109 22:05:53.682" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f8aea8297b8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="520"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<metadata>
<item name="Randomized">Suites and tests (seed 1679661076367343998)</item>
</metadata>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1042"></status>
</suite>
<suite id="s1-s11" name="Robot Framework test run with user-created Python Library one test at a time in serial random order">
<suite id="s1-s11-s1" name="Docker-Example-Python-Library1-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library1-Enhanced-Version.robot">
<test id="s1-s11-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:35.601" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.269" endtime="20200109 23:41:35.601"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.602" endtime="20200109 23:41:35.602"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.603" endtime="20200109 23:41:35.603"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.604" endtime="20200109 23:41:35.604"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.604" endtime="20200109 23:41:35.605"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.605" endtime="20200109 23:41:35.605"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.606" endtime="20200109 23:41:35.606"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.606" endtime="20200109 23:41:35.607"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.608" endtime="20200109 23:41:35.608"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.609" endtime="20200109 23:41:35.609"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.609" endtime="20200109 23:41:35.610"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.610" endtime="20200109 23:41:35.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:35.611" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.611" endtime="20200109 23:41:35.611"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.611" endtime="20200109 23:41:35.612"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.613" endtime="20200109 23:41:35.613"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.612" endtime="20200109 23:41:35.613"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:35.268" endtime="20200109 23:41:35.613" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s11-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:35.687" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.615" endtime="20200109 23:41:35.687"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.687" endtime="20200109 23:41:35.688"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.689" endtime="20200109 23:41:35.689"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.690" endtime="20200109 23:41:35.690"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.691" endtime="20200109 23:41:35.691"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.691" endtime="20200109 23:41:35.692"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.692" endtime="20200109 23:41:35.692"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.693" endtime="20200109 23:41:35.693"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.693" endtime="20200109 23:41:35.694"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.694" endtime="20200109 23:41:35.695"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.695" endtime="20200109 23:41:35.695"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.695" endtime="20200109 23:41:35.695"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:35.697" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200109 23:41:35.699" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200109 23:41:35.696" endtime="20200109 23:41:35.699"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 23:41:35.701" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 23:41:35.706" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 23:41:35.909" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 23:41:35.701" endtime="20200109 23:41:35.910"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 23:41:35.911" endtime="20200109 23:41:35.912"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.700" endtime="20200109 23:41:35.914"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.700" endtime="20200109 23:41:35.915"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.700" endtime="20200109 23:41:35.915"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.699" endtime="20200109 23:41:35.915"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 23:41:35.614" endtime="20200109 23:41:35.915" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: 200 == 200&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: 200 == 200</status>
</test>
<test id="s1-s11-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:35.252" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.019" endtime="20200109 23:41:35.252"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.253" endtime="20200109 23:41:35.253"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.254" endtime="20200109 23:41:35.254"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.255" endtime="20200109 23:41:35.255"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.255" endtime="20200109 23:41:35.256"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.256" endtime="20200109 23:41:35.257"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.257" endtime="20200109 23:41:35.257"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.257" endtime="20200109 23:41:35.258"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.258" endtime="20200109 23:41:35.259"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.259" endtime="20200109 23:41:35.259"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.260" endtime="20200109 23:41:35.261"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.261" endtime="20200109 23:41:35.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200109 23:41:35.263" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.262" endtime="20200109 23:41:35.263"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.263" endtime="20200109 23:41:35.264"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 23:41:35.264" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" starttime="20200109 23:41:35.264" endtime="20200109 23:41:35.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20200109 23:41:35.265" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.265" endtime="20200109 23:41:35.265"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.266" endtime="20200109 23:41:35.266"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.265" endtime="20200109 23:41:35.267"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:35.018" endtime="20200109 23:41:35.267" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s11-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:36.126" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.918" endtime="20200109 23:41:36.126"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.127" endtime="20200109 23:41:36.128"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.128" endtime="20200109 23:41:36.128"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.129" endtime="20200109 23:41:36.129"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.129" endtime="20200109 23:41:36.130"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.130" endtime="20200109 23:41:36.131"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.131" endtime="20200109 23:41:36.132"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.132" endtime="20200109 23:41:36.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:36.133" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.132" endtime="20200109 23:41:36.133"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200109 23:41:36.134" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200109 23:41:36.134" endtime="20200109 23:41:36.134"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.135" endtime="20200109 23:41:36.135"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:36.135" endtime="20200109 23:41:36.136"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:35.916" endtime="20200109 23:41:36.136" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1115"></status>
</suite>
<suite id="s1-s11-s2" name="Docker-Example-Python-Library2-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library2-Enhanced-Version.robot">
<test id="s1-s11-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:37.170" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.728" endtime="20200109 23:41:37.170"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.170" endtime="20200109 23:41:37.171"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.171" endtime="20200109 23:41:37.171"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.172" endtime="20200109 23:41:37.172"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.172" endtime="20200109 23:41:37.173"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.174" endtime="20200109 23:41:37.174"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.175" endtime="20200109 23:41:37.176"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.176" endtime="20200109 23:41:37.176"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:37.177" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200109 23:41:37.177" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200109 23:41:37.176" endtime="20200109 23:41:37.177"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 23:41:37.180" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 23:41:37.186" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 23:41:37.389" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 23:41:37.180" endtime="20200109 23:41:37.389"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 23:41:37.391" endtime="20200109 23:41:37.392"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:37.179" endtime="20200109 23:41:37.392"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:37.179" endtime="20200109 23:41:37.393"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:37.179" endtime="20200109 23:41:37.394"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:37.178" endtime="20200109 23:41:37.394"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 23:41:36.727" endtime="20200109 23:41:37.394" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: 200 == 200&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: 200 == 200</status>
</test>
<test id="s1-s11-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:36.375" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.162" endtime="20200109 23:41:36.375"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.375" endtime="20200109 23:41:36.376"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.376" endtime="20200109 23:41:36.376"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.377" endtime="20200109 23:41:36.377"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.377" endtime="20200109 23:41:36.378"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.378" endtime="20200109 23:41:36.378"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.378" endtime="20200109 23:41:36.379"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.379" endtime="20200109 23:41:36.379"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.379" endtime="20200109 23:41:36.380"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.380" endtime="20200109 23:41:36.381"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.381" endtime="20200109 23:41:36.381"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.381" endtime="20200109 23:41:36.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:36.383" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.382" endtime="20200109 23:41:36.383"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.383" endtime="20200109 23:41:36.383"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 23:41:36.384" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" starttime="20200109 23:41:36.384" endtime="20200109 23:41:36.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20200109 23:41:36.385" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.384" endtime="20200109 23:41:36.385"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.385" endtime="20200109 23:41:36.386"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:36.385" endtime="20200109 23:41:36.386"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:36.161" endtime="20200109 23:41:36.386" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s11-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:36.658" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.388" endtime="20200109 23:41:36.658"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.658" endtime="20200109 23:41:36.659"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.660" endtime="20200109 23:41:36.660"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.661" endtime="20200109 23:41:36.661"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.661" endtime="20200109 23:41:36.662"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.662" endtime="20200109 23:41:36.663"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.663" endtime="20200109 23:41:36.663"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.664" endtime="20200109 23:41:36.664"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.664" endtime="20200109 23:41:36.665"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.665" endtime="20200109 23:41:36.665"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.666" endtime="20200109 23:41:36.666"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.666" endtime="20200109 23:41:36.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:36.667" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.667" endtime="20200109 23:41:36.667"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.668" endtime="20200109 23:41:36.668"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.669" endtime="20200109 23:41:36.669"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:36.669" endtime="20200109 23:41:36.670"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:36.386" endtime="20200109 23:41:36.670" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s11-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:36.714" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.671" endtime="20200109 23:41:36.714"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.715" endtime="20200109 23:41:36.715"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.715" endtime="20200109 23:41:36.717"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.717" endtime="20200109 23:41:36.717"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.718" endtime="20200109 23:41:36.718"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.718" endtime="20200109 23:41:36.719"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.719" endtime="20200109 23:41:36.719"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.719" endtime="20200109 23:41:36.720"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.720" endtime="20200109 23:41:36.721"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.721" endtime="20200109 23:41:36.721"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.722" endtime="20200109 23:41:36.722"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.722" endtime="20200109 23:41:36.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:36.723" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.723" endtime="20200109 23:41:36.723"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.724" endtime="20200109 23:41:36.725"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.725" endtime="20200109 23:41:36.726"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.726" endtime="20200109 23:41:36.726"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:36.726" endtime="20200109 23:41:36.727"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:36.670" endtime="20200109 23:41:36.727" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1233"></status>
</suite>
<metadata>
<item name="Randomized">Suites and tests (seed 852938040845231136)</item>
</metadata>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="2348"></status>
</suite>
<suite id="s1-s12" name="Robot Framework test run with user-created Python Library one test at a time in serial random order">
<suite id="s1-s12-s1" name="Docker-Example-Python-Library1-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library1-Enhanced-Version.robot">
<test id="s1-s12-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.308" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a0c5eda0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.292" endtime="20200109 22:05:56.308"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.310" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.315" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.418" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.310" endtime="20200109 22:05:56.418"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.419" endtime="20200109 22:05:56.420"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.309" endtime="20200109 22:05:56.421"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.309" endtime="20200109 22:05:56.421"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.309" endtime="20200109 22:05:56.422"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.308" endtime="20200109 22:05:56.422"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.290" endtime="20200109 22:05:56.422" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7f07a0c5eda0&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7ff6003e69b0&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s12-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.439" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03aabe0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.428" endtime="20200109 22:05:56.439"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.442" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.446" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.547" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.441" endtime="20200109 22:05:56.548"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.548" endtime="20200109 22:05:56.549"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.440" endtime="20200109 22:05:56.549"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.440" endtime="20200109 22:05:56.549"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.440" endtime="20200109 22:05:56.550"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.439" endtime="20200109 22:05:56.550"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.425" endtime="20200109 22:05:56.550" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7f07a03aabe0&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7ff5ffb2db70&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s12-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.695" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03c23c8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.683" endtime="20200109 22:05:56.695"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.699" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.704" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.806" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.699" endtime="20200109 22:05:56.807"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.808" endtime="20200109 22:05:56.809"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.698" endtime="20200109 22:05:56.809"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.698" endtime="20200109 22:05:56.810"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.698" endtime="20200109 22:05:56.810"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.695" endtime="20200109 22:05:56.810"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.680" endtime="20200109 22:05:56.810" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7f07a03c23c8&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7ff600179198&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s12-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.565" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a09f8eb8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.554" endtime="20200109 22:05:56.565"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.568" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.572" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.674" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.567" endtime="20200109 22:05:56.675"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.676" endtime="20200109 22:05:56.677"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.567" endtime="20200109 22:05:56.677"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.566" endtime="20200109 22:05:56.677"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.566" endtime="20200109 22:05:56.678"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.565" endtime="20200109 22:05:56.678"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.551" endtime="20200109 22:05:56.678" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7f07a09f8eb8&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7ff5ffb47358&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="514"></status>
</suite>
<suite id="s1-s12-s2" name="Docker-Example-Python-Library2-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library2-Enhanced-Version.robot">
<test id="s1-s12-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:57.105" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03aaf28&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:57.094" endtime="20200109 22:05:57.105"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:57.107" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:57.111" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:57.214" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:57.107" endtime="20200109 22:05:57.214"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:57.215" endtime="20200109 22:05:57.216"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.106" endtime="20200109 22:05:57.216"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.106" endtime="20200109 22:05:57.217"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.106" endtime="20200109 22:05:57.217"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.105" endtime="20200109 22:05:57.218"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:57.090" endtime="20200109 22:05:57.218" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7f07a03aaf28&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7ff600412668&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s12-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.852" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a0c89668&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.843" endtime="20200109 22:05:56.852"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.855" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.858" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.959" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.854" endtime="20200109 22:05:56.960"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.960" endtime="20200109 22:05:56.961"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.854" endtime="20200109 22:05:56.962"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.853" endtime="20200109 22:05:56.962"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.853" endtime="20200109 22:05:56.962"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.853" endtime="20200109 22:05:56.962"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.842" endtime="20200109 22:05:56.962" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7f07a0c89668&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7ff5ffb438d0&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s12-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.975" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03bfcf8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.965" endtime="20200109 22:05:56.975"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.978" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.982" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:57.083" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.977" endtime="20200109 22:05:57.084"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:57.085" endtime="20200109 22:05:57.085"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.976" endtime="20200109 22:05:57.086"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.976" endtime="20200109 22:05:57.086"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.976" endtime="20200109 22:05:57.086"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.975" endtime="20200109 22:05:57.087"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.963" endtime="20200109 22:05:57.088" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7f07a03bfcf8&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7ff5ffb2df98&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s12-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:57.233" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a0c8b320&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:57.222" endtime="20200109 22:05:57.233"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:57.236" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:57.240" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:57.342" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:57.235" endtime="20200109 22:05:57.342"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:57.343" endtime="20200109 22:05:57.344"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.235" endtime="20200109 22:05:57.344"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.234" endtime="20200109 22:05:57.344"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.234" endtime="20200109 22:05:57.345"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.233" endtime="20200109 22:05:57.345"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:57.220" endtime="20200109 22:05:57.345" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7f07a0c8b320&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&amp;lt;urllib3.connection.HTTPConnection object at 0x7ff600408828&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="498"></status>
</suite>
<metadata>
<item name="Randomized">Suites and tests (seed 1759660221707504440)</item>
</metadata>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1012"></status>
</suite>
<suite id="s1-s13" name="Robot Framework test run with Requests Library in parallel">
<suite id="s1-s13-s1" name="Docker-Example-Requests-Library1" source="/rfw/Tests/Workshop-Part-One/Docker-Example-Requests-Library1.robot">
<test id="s1-s13-s1-t1" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:12.760" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:12.759" endtime="20200109 21:46:12.760"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:12.761" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:12.761" endtime="20200109 21:46:12.761"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:13.247" level="INFO">Post Request using : alias=jsonplaceholder, uri=/posts, data=&lt;empty&gt;, headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:13.247" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:12.762" endtime="20200109 21:46:13.247"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.247" endtime="20200109 21:46:13.248"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.248" endtime="20200109 21:46:13.249"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.249" endtime="20200109 21:46:13.250"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.250" endtime="20200109 21:46:13.251"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.251" endtime="20200109 21:46:13.252"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.252" endtime="20200109 21:46:13.253"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.253" endtime="20200109 21:46:13.254"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.255" endtime="20200109 21:46:13.256"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.256" endtime="20200109 21:46:13.256"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.257" endtime="20200109 21:46:13.257"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.258" endtime="20200109 21:46:13.258"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200109 21:46:13.259" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.259" endtime="20200109 21:46:13.259"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.260" endtime="20200109 21:46:13.261"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 21:46:13.261" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" starttime="20200109 21:46:13.261" endtime="20200109 21:46:13.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20200109 21:46:13.262" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.261" endtime="20200109 21:46:13.262"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:12.757" endtime="20200109 21:46:13.262" critical="yes"></status>
</test>
<test id="s1-s13-s1-t2" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:13.265" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:13.264" endtime="20200109 21:46:13.265"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:13.265" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:13.265" endtime="20200109 21:46:13.266"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>data={"title":"Testing with Robot Framework."}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:13.572" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/1, data={"title":"Testing with Robot Framework."},                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:13.573" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.268" endtime="20200109 21:46:13.573"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.573" endtime="20200109 21:46:13.574"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.574" endtime="20200109 21:46:13.576"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.576" endtime="20200109 21:46:13.577"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.578" endtime="20200109 21:46:13.579"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.579" endtime="20200109 21:46:13.580"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.580" endtime="20200109 21:46:13.581"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.581" endtime="20200109 21:46:13.582"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.582" endtime="20200109 21:46:13.583"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.583" endtime="20200109 21:46:13.584"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.584" endtime="20200109 21:46:13.584"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.584" endtime="20200109 21:46:13.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:13.586" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.585" endtime="20200109 21:46:13.586"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.586" endtime="20200109 21:46:13.586"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:13.263" endtime="20200109 21:46:13.587" critical="yes"></status>
</test>
<test id="s1-s13-s1-t3" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:13.590" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:13.590" endtime="20200109 21:46:13.590"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:13.590" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:13.590" endtime="20200109 21:46:13.591"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:13.619" level="INFO">Get Request using : alias=jsonplaceholder, uri=/posts/1, headers={'Content-Type': 'application/json'} json=None</msg>
<msg timestamp="20200109 21:46:13.620" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.591" endtime="20200109 21:46:13.620"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.620" endtime="20200109 21:46:13.622"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.622" endtime="20200109 21:46:13.623"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.623" endtime="20200109 21:46:13.624"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.625" endtime="20200109 21:46:13.626"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.626" endtime="20200109 21:46:13.627"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.628" endtime="20200109 21:46:13.629"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.629" endtime="20200109 21:46:13.630"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.631" endtime="20200109 21:46:13.632"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.632" endtime="20200109 21:46:13.632"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.633" endtime="20200109 21:46:13.633"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.633" endtime="20200109 21:46:13.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:13.635" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.634" endtime="20200109 21:46:13.635"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.635" endtime="20200109 21:46:13.636"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.636" endtime="20200109 21:46:13.636"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:13.588" endtime="20200109 21:46:13.637" critical="yes"></status>
</test>
<test id="s1-s13-s1-t4" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:13.640" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:13.640" endtime="20200109 21:46:13.640"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:13.641" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:13.640" endtime="20200109 21:46:13.641"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:14.183" level="INFO">Delete Request using : alias=jsonplaceholder, uri=/posts/1, data=None,                     headers={'Content-Type': 'application/json'}, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:14.183" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.641" endtime="20200109 21:46:14.184"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.184" endtime="20200109 21:46:14.185"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.186" endtime="20200109 21:46:14.190"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.190" endtime="20200109 21:46:14.192"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.192" endtime="20200109 21:46:14.193"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.194" endtime="20200109 21:46:14.196"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.196" endtime="20200109 21:46:14.197"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.197" endtime="20200109 21:46:14.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:14.200" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:14.199" endtime="20200109 21:46:14.200"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200109 21:46:14.201" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200109 21:46:14.201" endtime="20200109 21:46:14.202"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:13.639" endtime="20200109 21:46:14.202" critical="yes"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to let you try out a different and more refined approach for building out your Robot Framework regression tests. The following assumes that your team is comfortable
with looking at and contributing to a test that is mostly written using keywords from a Robot Framework test library. In this case the robotframework-requests library...</doc>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="1441"></status>
</suite>
<suite id="s1-s13-s2" name="Docker-Example-Requests-Library2" source="/rfw/Tests/Workshop-Part-One/Docker-Example-Requests-Library2.robot">
<test id="s1-s13-s2-t1" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:12.761" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:12.759" endtime="20200109 21:46:12.761"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:12.761" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:12.761" endtime="20200109 21:46:12.762"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:13.239" level="INFO">Put Request using : alias=jsonplaceholder, uri=/posts/2, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:13.240" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:12.762" endtime="20200109 21:46:13.240"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.240" endtime="20200109 21:46:13.241"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.241" endtime="20200109 21:46:13.242"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.242" endtime="20200109 21:46:13.244"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.244" endtime="20200109 21:46:13.245"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.246" endtime="20200109 21:46:13.247"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.247" endtime="20200109 21:46:13.248"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.248" endtime="20200109 21:46:13.249"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.249" endtime="20200109 21:46:13.250"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.250" endtime="20200109 21:46:13.251"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.251" endtime="20200109 21:46:13.252"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.252" endtime="20200109 21:46:13.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:13.254" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.253" endtime="20200109 21:46:13.254"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.254" endtime="20200109 21:46:13.255"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${PUT_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 21:46:13.256" level="INFO">${PUT_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" starttime="20200109 21:46:13.255" endtime="20200109 21:46:13.256"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PUT_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20200109 21:46:13.256" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.256" endtime="20200109 21:46:13.256"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:12.758" endtime="20200109 21:46:13.257" critical="yes"></status>
</test>
<test id="s1-s13-s2-t2" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:13.260" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:13.259" endtime="20200109 21:46:13.260"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:13.261" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:13.260" endtime="20200109 21:46:13.261"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>data={"body":"Testing with Robot Framework."}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:13.656" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/2, data={"body":"Testing with Robot Framework."},                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:13.656" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.263" endtime="20200109 21:46:13.656"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.656" endtime="20200109 21:46:13.657"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.657" endtime="20200109 21:46:13.658"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.658" endtime="20200109 21:46:13.659"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.659" endtime="20200109 21:46:13.660"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.661" endtime="20200109 21:46:13.661"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.662" endtime="20200109 21:46:13.662"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.662" endtime="20200109 21:46:13.663"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.663" endtime="20200109 21:46:13.664"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.664" endtime="20200109 21:46:13.664"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.664" endtime="20200109 21:46:13.665"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.665" endtime="20200109 21:46:13.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:13.666" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.665" endtime="20200109 21:46:13.666"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.666" endtime="20200109 21:46:13.666"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:13.258" endtime="20200109 21:46:13.667" critical="yes"></status>
</test>
<test id="s1-s13-s2-t3" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:13.669" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:13.668" endtime="20200109 21:46:13.669"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:13.669" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:13.669" endtime="20200109 21:46:13.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:13.701" level="INFO">Get Request using : alias=jsonplaceholder, uri=/posts/2, headers={'Content-Type': 'application/json'} json=None</msg>
<msg timestamp="20200109 21:46:13.701" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.670" endtime="20200109 21:46:13.701"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.701" endtime="20200109 21:46:13.703"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.703" endtime="20200109 21:46:13.704"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.704" endtime="20200109 21:46:13.705"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.705" endtime="20200109 21:46:13.706"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.707" endtime="20200109 21:46:13.707"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.708" endtime="20200109 21:46:13.708"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.708" endtime="20200109 21:46:13.710"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.710" endtime="20200109 21:46:13.712"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.712" endtime="20200109 21:46:13.712"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.712" endtime="20200109 21:46:13.713"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.713" endtime="20200109 21:46:13.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:13.714" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.714" endtime="20200109 21:46:13.714"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.715" endtime="20200109 21:46:13.715"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:13.715" endtime="20200109 21:46:13.716"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:13.667" endtime="20200109 21:46:13.716" critical="yes"></status>
</test>
<test id="s1-s13-s2-t4" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:13.718" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:13.718" endtime="20200109 21:46:13.718"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:13.718" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:13.718" endtime="20200109 21:46:13.719"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:14.189" level="INFO">Delete Request using : alias=jsonplaceholder, uri=/posts/2, data=None,                     headers={'Content-Type': 'application/json'}, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:14.189" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:13.719" endtime="20200109 21:46:14.190"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.190" endtime="20200109 21:46:14.192"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.192" endtime="20200109 21:46:14.193"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.194" endtime="20200109 21:46:14.196"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.196" endtime="20200109 21:46:14.197"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.197" endtime="20200109 21:46:14.199"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.199" endtime="20200109 21:46:14.200"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:14.201" endtime="20200109 21:46:14.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:14.203" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:14.202" endtime="20200109 21:46:14.203"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200109 21:46:14.205" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200109 21:46:14.204" endtime="20200109 21:46:14.205"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:13.716" endtime="20200109 21:46:14.205" critical="yes"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to let you try out a different and more refined approach for building out your Robot Framework regression tests. The following assumes that your team is comfortable
with looking at and contributing to a test that is mostly written using keywords from a Robot Framework test library. In this case the robotframework-requests library...</doc>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="1446"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="2887"></status>
</suite>
<suite id="s1-s14" name="Robot Framework test run with Requests Library in serial">
<suite id="s1-s14-s1" name="Docker-Example-Requests-Library1" source="/rfw/Tests/Workshop-Part-One/Docker-Example-Requests-Library1.robot">
<test id="s1-s14-s1-t1" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:07.838" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:07.837" endtime="20200109 21:46:07.838"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:07.839" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:07.839" endtime="20200109 21:46:07.839"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:08.356" level="INFO">Post Request using : alias=jsonplaceholder, uri=/posts, data=&lt;empty&gt;, headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:08.357" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:07.840" endtime="20200109 21:46:08.357"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.357" endtime="20200109 21:46:08.357"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.358" endtime="20200109 21:46:08.358"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.359" endtime="20200109 21:46:08.359"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.360" endtime="20200109 21:46:08.360"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.360" endtime="20200109 21:46:08.361"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.361" endtime="20200109 21:46:08.361"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.362" endtime="20200109 21:46:08.362"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.362" endtime="20200109 21:46:08.363"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.364" endtime="20200109 21:46:08.365"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.365" endtime="20200109 21:46:08.366"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.366" endtime="20200109 21:46:08.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200109 21:46:08.367" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:08.367" endtime="20200109 21:46:08.367"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.368" endtime="20200109 21:46:08.368"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 21:46:08.369" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" starttime="20200109 21:46:08.368" endtime="20200109 21:46:08.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20200109 21:46:08.369" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:08.369" endtime="20200109 21:46:08.369"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:07.835" endtime="20200109 21:46:08.369" critical="yes"></status>
</test>
<test id="s1-s14-s1-t2" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:08.372" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:08.371" endtime="20200109 21:46:08.372"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:08.373" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:08.373" endtime="20200109 21:46:08.373"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>data={"title":"Testing with Robot Framework."}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:08.985" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/1, data={"title":"Testing with Robot Framework."},                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:08.985" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:08.374" endtime="20200109 21:46:08.985"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.986" endtime="20200109 21:46:08.986"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.987" endtime="20200109 21:46:08.987"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.988" endtime="20200109 21:46:08.988"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.989" endtime="20200109 21:46:08.990"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.991" endtime="20200109 21:46:08.991"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.992" endtime="20200109 21:46:08.992"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.992" endtime="20200109 21:46:08.993"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.993" endtime="20200109 21:46:08.994"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.994" endtime="20200109 21:46:08.994"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.995" endtime="20200109 21:46:08.995"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.995" endtime="20200109 21:46:08.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:08.997" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:08.996" endtime="20200109 21:46:08.997"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:08.997" endtime="20200109 21:46:08.998"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:08.370" endtime="20200109 21:46:08.998" critical="yes"></status>
</test>
<test id="s1-s14-s1-t3" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:09.001" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:09.000" endtime="20200109 21:46:09.001"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:09.001" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:09.001" endtime="20200109 21:46:09.002"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:09.034" level="INFO">Get Request using : alias=jsonplaceholder, uri=/posts/1, headers={'Content-Type': 'application/json'} json=None</msg>
<msg timestamp="20200109 21:46:09.034" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:09.002" endtime="20200109 21:46:09.034"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.035" endtime="20200109 21:46:09.035"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.036" endtime="20200109 21:46:09.036"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.036" endtime="20200109 21:46:09.037"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.037" endtime="20200109 21:46:09.038"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.038" endtime="20200109 21:46:09.039"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.040" endtime="20200109 21:46:09.041"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.041" endtime="20200109 21:46:09.043"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.043" endtime="20200109 21:46:09.044"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.044" endtime="20200109 21:46:09.044"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.045" endtime="20200109 21:46:09.045"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.045" endtime="20200109 21:46:09.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:09.047" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:09.046" endtime="20200109 21:46:09.047"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.047" endtime="20200109 21:46:09.047"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.048" endtime="20200109 21:46:09.048"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:08.998" endtime="20200109 21:46:09.048" critical="yes"></status>
</test>
<test id="s1-s14-s1-t4" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:09.051" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:09.050" endtime="20200109 21:46:09.051"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:09.052" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:09.051" endtime="20200109 21:46:09.052"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:09.447" level="INFO">Delete Request using : alias=jsonplaceholder, uri=/posts/1, data=None,                     headers={'Content-Type': 'application/json'}, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:09.447" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:09.052" endtime="20200109 21:46:09.447"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.447" endtime="20200109 21:46:09.448"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.449" endtime="20200109 21:46:09.450"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.450" endtime="20200109 21:46:09.451"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.452" endtime="20200109 21:46:09.452"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.453" endtime="20200109 21:46:09.453"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.453" endtime="20200109 21:46:09.454"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.454" endtime="20200109 21:46:09.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:09.456" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:09.455" endtime="20200109 21:46:09.456"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200109 21:46:09.458" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200109 21:46:09.457" endtime="20200109 21:46:09.458"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:09.049" endtime="20200109 21:46:09.458" critical="yes"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to let you try out a different and more refined approach for building out your Robot Framework regression tests. The following assumes that your team is comfortable
with looking at and contributing to a test that is mostly written using keywords from a Robot Framework test library. In this case the robotframework-requests library...</doc>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="1621"></status>
</suite>
<suite id="s1-s14-s2" name="Docker-Example-Requests-Library2" source="/rfw/Tests/Workshop-Part-One/Docker-Example-Requests-Library2.robot">
<test id="s1-s14-s2-t1" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:09.471" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:09.471" endtime="20200109 21:46:09.471"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:09.472" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:09.471" endtime="20200109 21:46:09.472"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:09.965" level="INFO">Put Request using : alias=jsonplaceholder, uri=/posts/2, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:09.966" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:09.472" endtime="20200109 21:46:09.966"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.966" endtime="20200109 21:46:09.967"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.967" endtime="20200109 21:46:09.968"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.969" endtime="20200109 21:46:09.970"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.970" endtime="20200109 21:46:09.970"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.971" endtime="20200109 21:46:09.971"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.971" endtime="20200109 21:46:09.972"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.972" endtime="20200109 21:46:09.973"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.973" endtime="20200109 21:46:09.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.975" endtime="20200109 21:46:09.975"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.976" endtime="20200109 21:46:09.976"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.976" endtime="20200109 21:46:09.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:09.977" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:09.977" endtime="20200109 21:46:09.978"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:09.978" endtime="20200109 21:46:09.978"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${PUT_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 21:46:09.979" level="INFO">${PUT_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" starttime="20200109 21:46:09.978" endtime="20200109 21:46:09.979"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PUT_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20200109 21:46:09.979" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:09.979" endtime="20200109 21:46:09.979"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:09.470" endtime="20200109 21:46:09.980" critical="yes"></status>
</test>
<test id="s1-s14-s2-t2" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:09.982" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:09.981" endtime="20200109 21:46:09.982"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:09.983" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:09.982" endtime="20200109 21:46:09.984"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>data={"body":"Testing with Robot Framework."}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:10.453" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/2, data={"body":"Testing with Robot Framework."},                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:10.453" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:09.984" endtime="20200109 21:46:10.453"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.454" endtime="20200109 21:46:10.454"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.454" endtime="20200109 21:46:10.455"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.456" endtime="20200109 21:46:10.456"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.456" endtime="20200109 21:46:10.457"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.458" endtime="20200109 21:46:10.459"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.459" endtime="20200109 21:46:10.460"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.460" endtime="20200109 21:46:10.461"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.461" endtime="20200109 21:46:10.462"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.462" endtime="20200109 21:46:10.463"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.463" endtime="20200109 21:46:10.463"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.464" endtime="20200109 21:46:10.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:10.465" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:10.464" endtime="20200109 21:46:10.465"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:10.465" endtime="20200109 21:46:10.466"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:09.980" endtime="20200109 21:46:10.466" critical="yes"></status>
</test>
<test id="s1-s14-s2-t3" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:10.469" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:10.469" endtime="20200109 21:46:10.469"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:10.470" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:10.469" endtime="20200109 21:46:10.470"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:11.158" level="INFO">Get Request using : alias=jsonplaceholder, uri=/posts/2, headers={'Content-Type': 'application/json'} json=None</msg>
<msg timestamp="20200109 21:46:11.158" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:10.470" endtime="20200109 21:46:11.159"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.159" endtime="20200109 21:46:11.160"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.161" endtime="20200109 21:46:11.161"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.162" endtime="20200109 21:46:11.163"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.163" endtime="20200109 21:46:11.164"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.164" endtime="20200109 21:46:11.164"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.165" endtime="20200109 21:46:11.166"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.166" endtime="20200109 21:46:11.168"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.169" endtime="20200109 21:46:11.170"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.172" endtime="20200109 21:46:11.172"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.173" endtime="20200109 21:46:11.173"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.174" endtime="20200109 21:46:11.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:11.176" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:11.176" endtime="20200109 21:46:11.177"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.177" endtime="20200109 21:46:11.177"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.177" endtime="20200109 21:46:11.178"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:10.466" endtime="20200109 21:46:11.178" critical="yes"></status>
</test>
<test id="s1-s14-s2-t4" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20200109 21:46:11.180" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200109 21:46:11.180" endtime="20200109 21:46:11.180"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20200109 21:46:11.181" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200109 21:46:11.180" endtime="20200109 21:46:11.181"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 21:46:11.588" level="INFO">Delete Request using : alias=jsonplaceholder, uri=/posts/2, data=None,                     headers={'Content-Type': 'application/json'}, allow_redirects=True </msg>
<msg timestamp="20200109 21:46:11.589" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 21:46:11.181" endtime="20200109 21:46:11.589"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.589" endtime="20200109 21:46:11.590"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.590" endtime="20200109 21:46:11.591"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.592" endtime="20200109 21:46:11.593"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.593" endtime="20200109 21:46:11.594"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.595" endtime="20200109 21:46:11.595"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.596" endtime="20200109 21:46:11.596"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 21:46:11.597" endtime="20200109 21:46:11.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 21:46:11.598" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 21:46:11.597" endtime="20200109 21:46:11.598"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200109 21:46:11.599" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200109 21:46:11.598" endtime="20200109 21:46:11.599"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 21:46:11.178" endtime="20200109 21:46:11.599" critical="yes"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to let you try out a different and more refined approach for building out your Robot Framework regression tests. The following assumes that your team is comfortable
with looking at and contributing to a test that is mostly written using keywords from a Robot Framework test library. In this case the robotframework-requests library...</doc>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="2129"></status>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="3750"></status>
</suite>
<suite id="s1-s15" name="Robot Framework test run with user-created Python Library one test at a time in serial random order">
<suite id="s1-s15-s1" name="Docker-Example-Python-Library1-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library1-Enhanced-Version.robot">
<test id="s1-s15-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:35.252" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.019" endtime="20200109 23:41:35.252"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.253" endtime="20200109 23:41:35.253"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.254" endtime="20200109 23:41:35.254"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.255" endtime="20200109 23:41:35.255"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.255" endtime="20200109 23:41:35.256"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.256" endtime="20200109 23:41:35.257"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.257" endtime="20200109 23:41:35.257"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.257" endtime="20200109 23:41:35.258"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.258" endtime="20200109 23:41:35.259"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.259" endtime="20200109 23:41:35.259"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.260" endtime="20200109 23:41:35.261"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.261" endtime="20200109 23:41:35.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200109 23:41:35.263" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.262" endtime="20200109 23:41:35.263"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.263" endtime="20200109 23:41:35.264"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 23:41:35.264" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" starttime="20200109 23:41:35.264" endtime="20200109 23:41:35.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20200109 23:41:35.265" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.265" endtime="20200109 23:41:35.265"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.266" endtime="20200109 23:41:35.266"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.265" endtime="20200109 23:41:35.267"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:35.018" endtime="20200109 23:41:35.267" critical="yes"></status>
</test>
<test id="s1-s15-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:35.601" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.269" endtime="20200109 23:41:35.601"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.602" endtime="20200109 23:41:35.602"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.603" endtime="20200109 23:41:35.603"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.604" endtime="20200109 23:41:35.604"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.604" endtime="20200109 23:41:35.605"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.605" endtime="20200109 23:41:35.605"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.606" endtime="20200109 23:41:35.606"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.606" endtime="20200109 23:41:35.607"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.608" endtime="20200109 23:41:35.608"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.609" endtime="20200109 23:41:35.609"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.609" endtime="20200109 23:41:35.610"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.610" endtime="20200109 23:41:35.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:35.611" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.611" endtime="20200109 23:41:35.611"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.611" endtime="20200109 23:41:35.612"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.613" endtime="20200109 23:41:35.613"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.612" endtime="20200109 23:41:35.613"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:35.268" endtime="20200109 23:41:35.613" critical="yes"></status>
</test>
<test id="s1-s15-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:35.687" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.615" endtime="20200109 23:41:35.687"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.687" endtime="20200109 23:41:35.688"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.689" endtime="20200109 23:41:35.689"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.690" endtime="20200109 23:41:35.690"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.691" endtime="20200109 23:41:35.691"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.691" endtime="20200109 23:41:35.692"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.692" endtime="20200109 23:41:35.692"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.693" endtime="20200109 23:41:35.693"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.693" endtime="20200109 23:41:35.694"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.694" endtime="20200109 23:41:35.695"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.695" endtime="20200109 23:41:35.695"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:35.695" endtime="20200109 23:41:35.695"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:35.697" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200109 23:41:35.699" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200109 23:41:35.696" endtime="20200109 23:41:35.699"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 23:41:35.701" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 23:41:35.706" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 23:41:35.909" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 23:41:35.701" endtime="20200109 23:41:35.910"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 23:41:35.911" endtime="20200109 23:41:35.912"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.700" endtime="20200109 23:41:35.914"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.700" endtime="20200109 23:41:35.915"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.700" endtime="20200109 23:41:35.915"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:35.699" endtime="20200109 23:41:35.915"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 23:41:35.614" endtime="20200109 23:41:35.915" critical="yes">200 == 200</status>
</test>
<test id="s1-s15-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:36.126" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:35.918" endtime="20200109 23:41:36.126"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.127" endtime="20200109 23:41:36.128"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.128" endtime="20200109 23:41:36.128"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.129" endtime="20200109 23:41:36.129"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.129" endtime="20200109 23:41:36.130"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.130" endtime="20200109 23:41:36.131"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.131" endtime="20200109 23:41:36.132"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.132" endtime="20200109 23:41:36.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:36.133" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.132" endtime="20200109 23:41:36.133"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200109 23:41:36.134" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200109 23:41:36.134" endtime="20200109 23:41:36.134"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.135" endtime="20200109 23:41:36.135"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:36.135" endtime="20200109 23:41:36.136"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:35.916" endtime="20200109 23:41:36.136" critical="yes"></status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1115"></status>
</suite>
<suite id="s1-s15-s2" name="Docker-Example-Python-Library2-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library2-Enhanced-Version.robot">
<test id="s1-s15-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:36.375" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.162" endtime="20200109 23:41:36.375"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.375" endtime="20200109 23:41:36.376"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.376" endtime="20200109 23:41:36.376"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.377" endtime="20200109 23:41:36.377"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.377" endtime="20200109 23:41:36.378"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.378" endtime="20200109 23:41:36.378"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.378" endtime="20200109 23:41:36.379"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.379" endtime="20200109 23:41:36.379"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.379" endtime="20200109 23:41:36.380"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.380" endtime="20200109 23:41:36.381"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.381" endtime="20200109 23:41:36.381"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.381" endtime="20200109 23:41:36.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:36.383" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.382" endtime="20200109 23:41:36.383"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.383" endtime="20200109 23:41:36.383"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200109 23:41:36.384" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" starttime="20200109 23:41:36.384" endtime="20200109 23:41:36.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20200109 23:41:36.385" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.384" endtime="20200109 23:41:36.385"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.385" endtime="20200109 23:41:36.386"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:36.385" endtime="20200109 23:41:36.386"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:36.161" endtime="20200109 23:41:36.386" critical="yes"></status>
</test>
<test id="s1-s15-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:36.658" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.388" endtime="20200109 23:41:36.658"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.658" endtime="20200109 23:41:36.659"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.660" endtime="20200109 23:41:36.660"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.661" endtime="20200109 23:41:36.661"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.661" endtime="20200109 23:41:36.662"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.662" endtime="20200109 23:41:36.663"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.663" endtime="20200109 23:41:36.663"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.664" endtime="20200109 23:41:36.664"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.664" endtime="20200109 23:41:36.665"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.665" endtime="20200109 23:41:36.665"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.666" endtime="20200109 23:41:36.666"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.666" endtime="20200109 23:41:36.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:36.667" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.667" endtime="20200109 23:41:36.667"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.668" endtime="20200109 23:41:36.668"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.669" endtime="20200109 23:41:36.669"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:36.669" endtime="20200109 23:41:36.670"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:36.386" endtime="20200109 23:41:36.670" critical="yes"></status>
</test>
<test id="s1-s15-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:36.714" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.671" endtime="20200109 23:41:36.714"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.715" endtime="20200109 23:41:36.715"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.715" endtime="20200109 23:41:36.717"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.717" endtime="20200109 23:41:36.717"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.718" endtime="20200109 23:41:36.718"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.718" endtime="20200109 23:41:36.719"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.719" endtime="20200109 23:41:36.719"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.719" endtime="20200109 23:41:36.720"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.720" endtime="20200109 23:41:36.721"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.721" endtime="20200109 23:41:36.721"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.722" endtime="20200109 23:41:36.722"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.722" endtime="20200109 23:41:36.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:36.723" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.723" endtime="20200109 23:41:36.723"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.724" endtime="20200109 23:41:36.725"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.725" endtime="20200109 23:41:36.726"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:36.726" endtime="20200109 23:41:36.726"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:36.726" endtime="20200109 23:41:36.727"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200109 23:41:36.670" endtime="20200109 23:41:36.727" critical="yes"></status>
</test>
<test id="s1-s15-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 23:41:37.170" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200109 23:41:36.728" endtime="20200109 23:41:37.170"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.170" endtime="20200109 23:41:37.171"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.171" endtime="20200109 23:41:37.171"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.172" endtime="20200109 23:41:37.172"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.172" endtime="20200109 23:41:37.173"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.174" endtime="20200109 23:41:37.174"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.175" endtime="20200109 23:41:37.176"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200109 23:41:37.176" endtime="20200109 23:41:37.176"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200109 23:41:37.177" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200109 23:41:37.177" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200109 23:41:37.176" endtime="20200109 23:41:37.177"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 23:41:37.180" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 23:41:37.186" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 23:41:37.389" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 23:41:37.180" endtime="20200109 23:41:37.389"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 23:41:37.391" endtime="20200109 23:41:37.392"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:37.179" endtime="20200109 23:41:37.392"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:37.179" endtime="20200109 23:41:37.393"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:37.179" endtime="20200109 23:41:37.394"></status>
</kw>
<status status="PASS" starttime="20200109 23:41:37.178" endtime="20200109 23:41:37.394"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 23:41:36.727" endtime="20200109 23:41:37.394" critical="yes">200 == 200</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1233"></status>
</suite>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="2348"></status>
</suite>
<suite id="s1-s16" name="Robot Framework test run with user-created Python Library one test at a time in serial random order">
<suite id="s1-s16-s1" name="Docker-Example-Python-Library1-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library1-Enhanced-Version.robot">
<test id="s1-s16-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.308" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a0c5eda0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.292" endtime="20200109 22:05:56.308"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.310" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.315" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.418" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.310" endtime="20200109 22:05:56.418"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.419" endtime="20200109 22:05:56.420"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.309" endtime="20200109 22:05:56.421"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.309" endtime="20200109 22:05:56.421"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.309" endtime="20200109 22:05:56.422"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.308" endtime="20200109 22:05:56.422"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.290" endtime="20200109 22:05:56.422" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a0c5eda0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s16-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.439" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03aabe0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.428" endtime="20200109 22:05:56.439"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.442" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.446" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.547" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.441" endtime="20200109 22:05:56.548"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.548" endtime="20200109 22:05:56.549"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.440" endtime="20200109 22:05:56.549"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.440" endtime="20200109 22:05:56.549"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.440" endtime="20200109 22:05:56.550"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.439" endtime="20200109 22:05:56.550"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.425" endtime="20200109 22:05:56.550" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03aabe0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s16-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.565" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a09f8eb8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.554" endtime="20200109 22:05:56.565"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.568" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.572" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.674" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.567" endtime="20200109 22:05:56.675"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.676" endtime="20200109 22:05:56.677"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.567" endtime="20200109 22:05:56.677"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.566" endtime="20200109 22:05:56.677"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.566" endtime="20200109 22:05:56.678"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.565" endtime="20200109 22:05:56.678"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.551" endtime="20200109 22:05:56.678" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a09f8eb8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s16-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.695" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03c23c8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.683" endtime="20200109 22:05:56.695"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.699" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.704" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.806" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.699" endtime="20200109 22:05:56.807"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.808" endtime="20200109 22:05:56.809"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.698" endtime="20200109 22:05:56.809"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.698" endtime="20200109 22:05:56.810"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.698" endtime="20200109 22:05:56.810"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.695" endtime="20200109 22:05:56.810"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.680" endtime="20200109 22:05:56.810" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03c23c8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="514"></status>
</suite>
<suite id="s1-s16-s2" name="Docker-Example-Python-Library2-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library2-Enhanced-Version.robot">
<test id="s1-s16-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.852" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a0c89668&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.843" endtime="20200109 22:05:56.852"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.855" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.858" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:56.959" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.854" endtime="20200109 22:05:56.960"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:56.960" endtime="20200109 22:05:56.961"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.854" endtime="20200109 22:05:56.962"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.853" endtime="20200109 22:05:56.962"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.853" endtime="20200109 22:05:56.962"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.853" endtime="20200109 22:05:56.962"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.842" endtime="20200109 22:05:56.962" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a0c89668&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s16-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:56.975" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03bfcf8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:56.965" endtime="20200109 22:05:56.975"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:56.978" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:56.982" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:57.083" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:56.977" endtime="20200109 22:05:57.084"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:57.085" endtime="20200109 22:05:57.085"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.976" endtime="20200109 22:05:57.086"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.976" endtime="20200109 22:05:57.086"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.976" endtime="20200109 22:05:57.086"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:56.975" endtime="20200109 22:05:57.087"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:56.963" endtime="20200109 22:05:57.088" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03bfcf8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s16-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:57.105" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03aaf28&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:57.094" endtime="20200109 22:05:57.105"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:57.107" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:57.111" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:57.214" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:57.107" endtime="20200109 22:05:57.214"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:57.215" endtime="20200109 22:05:57.216"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.106" endtime="20200109 22:05:57.216"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.106" endtime="20200109 22:05:57.217"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.106" endtime="20200109 22:05:57.217"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.105" endtime="20200109 22:05:57.218"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:57.090" endtime="20200109 22:05:57.218" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a03aaf28&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<test id="s1-s16-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200109 22:05:57.233" level="FAIL">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a0c8b320&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</msg>
<status status="FAIL" starttime="20200109 22:05:57.222" endtime="20200109 22:05:57.233"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200109 22:05:57.236" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200109 22:05:57.240" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200109 22:05:57.342" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200109 22:05:57.235" endtime="20200109 22:05:57.342"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200109 22:05:57.343" endtime="20200109 22:05:57.344"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.235" endtime="20200109 22:05:57.344"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.234" endtime="20200109 22:05:57.344"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.234" endtime="20200109 22:05:57.345"></status>
</kw>
<status status="PASS" starttime="20200109 22:05:57.233" endtime="20200109 22:05:57.345"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200109 22:05:57.220" endtime="20200109 22:05:57.345" critical="yes">ConnectionError: HTTPConnectionPool(host='jsonplaceholder.typicode.com', port=80): Max retries exceeded with url: /posts/2 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f07a0c8b320&gt;: Failed to establish a new connection: [Errno -2] Name or service not known',))</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="498"></status>
</suite>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1012"></status>
</suite>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="420017"></status>
</suite>
<statistics>
<total>
<stat pass="49" fail="33">Critical Tests</stat>
<stat pass="49" fail="33">All Tests</stat>
</total>
<tag>
<stat pass="2" fail="0">Check_One</stat>
<stat pass="2" fail="0">Check_Three</stat>
<stat pass="2" fail="0">Check_Two</stat>
<stat pass="0" fail="2">Desktop Chrome</stat>
<stat pass="2" fail="0">Desktop Firefox</stat>
<stat pass="1" fail="1">Desktop Safari</stat>
<stat pass="2" fail="0">Group_One</stat>
<stat pass="2" fail="0">Group_Three</stat>
<stat pass="2" fail="0">Group_Two</stat>
<stat pass="34" fail="30">Regression_Tests</stat>
<stat pass="34" fail="30">Slightly_Refined_And_Room_For_Enhancements</stat>
</tag>
<suite>
<stat pass="49" fail="33" id="s1" name="Leon Robot Framework Assistant Combined Results Dashboard">Leon Robot Framework Assistant Combined Results Dashboard</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
