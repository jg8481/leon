<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 3.1.2 (Python 3.7.5 on darwin)" generated="20191231 22:50:52.323" rpa="false">
<suite id="s1" name="Leon Robot Framework Assistant Combined Results Dashboard">
<suite id="s1-s1" name="Group_One Tue Dec 31 22:46:19 EST 2019">
<suite id="s1-s1-s1" name="Leon-Robot-Framework-Customizable-Parallel-Runner1" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner1.robot">
<test id="s1-s1-s1-t1" name="AUTOMATED CHECK 1 - PARALLEL RUNNER 1 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:46:20.180" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:46:20.179" endtime="20191231 22:46:20.180"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 1 - A hypothetical automated check - PARALLEL RUNNER 1</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:46:20.181" level="INFO">Starting process:
echo "AUTOMATED CHECK 1 - A hypothetical automated check - PARALLEL RUNNER 1 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:46:20.185" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:46:20.395" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:46:20.180" endtime="20191231 22:46:20.395"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:20.180" endtime="20191231 22:46:20.395"></status>
</kw>
<tags>
<tag>Group_One</tag>
</tags>
<status status="PASS" starttime="20191231 22:46:20.179" endtime="20191231 22:46:20.396" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:46:20.163" endtime="20191231 22:46:20.396"></status>
</suite>
<suite id="s1-s1-s2" name="Leon-Robot-Framework-Customizable-Parallel-Runner2" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner2.robot">
<test id="s1-s1-s2-t1" name="AUTOMATED CHECK 1 - PARALLEL RUNNER 2 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:46:20.180" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:46:20.179" endtime="20191231 22:46:20.180"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 1 - A hypothetical automated check - PARALLEL RUNNER 2</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:46:20.181" level="INFO">Starting process:
echo "AUTOMATED CHECK 1 - A hypothetical automated check - PARALLEL RUNNER 2 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:46:20.185" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:46:20.395" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:46:20.180" endtime="20191231 22:46:20.395"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:20.180" endtime="20191231 22:46:20.395"></status>
</kw>
<tags>
<tag>Group_One</tag>
</tags>
<status status="PASS" starttime="20191231 22:46:20.179" endtime="20191231 22:46:20.396" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:46:20.163" endtime="20191231 22:46:20.396"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<status status="PASS" starttime="20191231 22:46:20.139" endtime="20191231 22:46:20.397"></status>
</suite>
<suite id="s1-s2" name="Group_Three Tue Dec 31 22:46:23 EST 2019">
<suite id="s1-s2-s1" name="Leon-Robot-Framework-Customizable-Parallel-Runner1" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner1.robot">
<test id="s1-s2-s1-t1" name="AUTOMATED CHECK 3 - PARALLEL RUNNER 1 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:46:23.689" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:46:23.689" endtime="20191231 22:46:23.689"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 3 - A hypothetical automated check - PARALLEL RUNNER 1</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:46:23.690" level="INFO">Starting process:
echo "AUTOMATED CHECK 3 - A hypothetical automated check - PARALLEL RUNNER 1 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:46:23.694" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:46:23.895" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:46:23.689" endtime="20191231 22:46:23.895"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:23.689" endtime="20191231 22:46:23.896"></status>
</kw>
<tags>
<tag>Group_Three</tag>
</tags>
<status status="PASS" starttime="20191231 22:46:23.688" endtime="20191231 22:46:23.896" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:46:23.672" endtime="20191231 22:46:23.896"></status>
</suite>
<suite id="s1-s2-s2" name="Leon-Robot-Framework-Customizable-Parallel-Runner2" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner2.robot">
<test id="s1-s2-s2-t1" name="AUTOMATED CHECK 3 - PARALLEL RUNNER 2 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:46:23.690" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:46:23.690" endtime="20191231 22:46:23.690"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 3 - A hypothetical automated check - PARALLEL RUNNER 2</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:46:23.691" level="INFO">Starting process:
echo "AUTOMATED CHECK 3 - A hypothetical automated check - PARALLEL RUNNER 2 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:46:23.695" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:46:23.902" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:46:23.691" endtime="20191231 22:46:23.902"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:23.690" endtime="20191231 22:46:23.902"></status>
</kw>
<tags>
<tag>Group_Three</tag>
</tags>
<status status="PASS" starttime="20191231 22:46:23.689" endtime="20191231 22:46:23.903" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:46:23.673" endtime="20191231 22:46:23.904"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<status status="PASS" starttime="20191231 22:46:23.648" endtime="20191231 22:46:23.905"></status>
</suite>
<suite id="s1-s3" name="Group_Two Tue Dec 31 22:46:17 EST 2019">
<suite id="s1-s3-s1" name="Leon-Robot-Framework-Customizable-Parallel-Runner1" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner1.robot">
<test id="s1-s3-s1-t1" name="AUTOMATED CHECK 2 - PARALLEL RUNNER 1 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:46:18.222" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:46:18.222" endtime="20191231 22:46:18.223"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 2 - A hypothetical automated check - PARALLEL RUNNER 1</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:46:18.223" level="INFO">Starting process:
echo "AUTOMATED CHECK 2 - A hypothetical automated check - PARALLEL RUNNER 1 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:46:18.228" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:46:18.635" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:46:18.223" endtime="20191231 22:46:18.636"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:18.223" endtime="20191231 22:46:18.636"></status>
</kw>
<tags>
<tag>Group_Two</tag>
</tags>
<status status="PASS" starttime="20191231 22:46:18.222" endtime="20191231 22:46:18.636" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:46:18.206" endtime="20191231 22:46:18.637"></status>
</suite>
<suite id="s1-s3-s2" name="Leon-Robot-Framework-Customizable-Parallel-Runner2" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Parallel-Runner2.robot">
<test id="s1-s3-s2-t1" name="AUTOMATED CHECK 2 - PARALLEL RUNNER 2 : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:46:18.222" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:46:18.222" endtime="20191231 22:46:18.222"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 2 - A hypothetical automated check - PARALLEL RUNNER 2</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:46:18.223" level="INFO">Starting process:
echo "AUTOMATED CHECK 2 - A hypothetical automated check - PARALLEL RUNNER 2 ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:46:18.227" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:46:18.430" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:46:18.223" endtime="20191231 22:46:18.430"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:18.222" endtime="20191231 22:46:18.431"></status>
</kw>
<tags>
<tag>Group_Two</tag>
</tags>
<status status="PASS" starttime="20191231 22:46:18.221" endtime="20191231 22:46:18.431" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:46:18.205" endtime="20191231 22:46:18.431"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<status status="PASS" starttime="20191231 22:46:18.182" endtime="20191231 22:46:18.638"></status>
</suite>
<suite id="s1-s4" name="Robot Framework automation run in a manually constructed sequence set up through leon-ai with a CustomSerialAutomationRunnerFile.csv file">
<suite id="s1-s4-s1" name="Check_One Tue Dec 31 22:45:42 EST 2019" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s4-s1-t1" name="AUTOMATED CHECK 1 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:45:43.305" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:45:43.305" endtime="20191231 22:45:43.305"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 1 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:45:43.306" level="INFO">Starting process:
echo "AUTOMATED CHECK 1 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:45:43.310" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:45:43.513" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:45:43.305" endtime="20191231 22:45:43.514"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:43.305" endtime="20191231 22:45:43.514"></status>
</kw>
<tags>
<tag>Check_One</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:43.304" endtime="20191231 22:45:43.514" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:45:43.266" endtime="20191231 22:45:43.515"></status>
</suite>
<suite id="s1-s4-s2" name="Check_Three Tue Dec 31 22:45:38 EST 2019" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s4-s2-t1" name="AUTOMATED CHECK 3 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:45:38.873" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:45:38.873" endtime="20191231 22:45:38.873"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 3 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:45:38.874" level="INFO">Starting process:
echo "AUTOMATED CHECK 3 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:45:38.878" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:45:39.186" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:45:38.873" endtime="20191231 22:45:39.186"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:38.873" endtime="20191231 22:45:39.187"></status>
</kw>
<tags>
<tag>Check_Three</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:38.872" endtime="20191231 22:45:39.187" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:45:38.834" endtime="20191231 22:45:39.188"></status>
</suite>
<suite id="s1-s4-s3" name="Check_Two Tue Dec 31 22:45:39 EST 2019" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s4-s3-t1" name="AUTOMATED CHECK 2 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:45:40.046" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:45:40.046" endtime="20191231 22:45:40.046"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 2 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:45:40.047" level="INFO">Starting process:
echo "AUTOMATED CHECK 2 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:45:40.050" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:45:40.255" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:45:40.046" endtime="20191231 22:45:40.255"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:40.046" endtime="20191231 22:45:40.256"></status>
</kw>
<tags>
<tag>Check_Two</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:40.045" endtime="20191231 22:45:40.256" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:45:40.007" endtime="20191231 22:45:40.256"></status>
</suite>
<suite id="s1-s4-s4" name="Start Tue Dec 31 22:45:37 EST 2019" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s4-s4-t1" name="CUSTOM RUNNER START : This helps avoid skipping the first actual automated check in the runner file.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>This runs first.</arg>
</arguments>
<msg timestamp="20191231 22:45:38.003" level="INFO">This runs first.</msg>
<status status="PASS" starttime="20191231 22:45:38.003" endtime="20191231 22:45:38.003"></status>
</kw>
<tags>
<tag>Start</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:38.002" endtime="20191231 22:45:38.004" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:45:37.965" endtime="20191231 22:45:38.004"></status>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="891"></status>
</suite>
<suite id="s1-s5" name="Check_One Tue Dec 31 22:45:42 EST 2019" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s5-t1" name="AUTOMATED CHECK 1 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:45:43.305" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:45:43.305" endtime="20191231 22:45:43.305"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 1 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:45:43.306" level="INFO">Starting process:
echo "AUTOMATED CHECK 1 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:45:43.310" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:45:43.513" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:45:43.305" endtime="20191231 22:45:43.514"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:43.305" endtime="20191231 22:45:43.514"></status>
</kw>
<tags>
<tag>Check_One</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:43.304" endtime="20191231 22:45:43.514" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:45:43.266" endtime="20191231 22:45:43.515"></status>
</suite>
<suite id="s1-s6" name="Check_Three Tue Dec 31 22:45:38 EST 2019" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s6-t1" name="AUTOMATED CHECK 3 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:45:38.873" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:45:38.873" endtime="20191231 22:45:38.873"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 3 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:45:38.874" level="INFO">Starting process:
echo "AUTOMATED CHECK 3 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:45:38.878" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:45:39.186" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:45:38.873" endtime="20191231 22:45:39.186"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:38.873" endtime="20191231 22:45:39.187"></status>
</kw>
<tags>
<tag>Check_Three</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:38.872" endtime="20191231 22:45:39.187" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:45:38.834" endtime="20191231 22:45:39.188"></status>
</suite>
<suite id="s1-s7" name="Check_Two Tue Dec 31 22:45:39 EST 2019" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Robot-Files/Leon-Robot-Framework-Customizable-Serial-Runner.robot">
<test id="s1-s7-t1" name="AUTOMATED CHECK 2 - SERIAL RUNNER : An automated check that will run.">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Just giving Robot Framework something to do when triggered by the voice assistant.</arg>
</arguments>
<msg timestamp="20191231 22:45:40.046" level="INFO">Just giving Robot Framework something to do when triggered by the voice assistant.</msg>
<status status="PASS" starttime="20191231 22:45:40.046" endtime="20191231 22:45:40.046"></status>
</kw>
<kw name="Send Short Message Through Slack About The Automation Run">
<arguments>
<arg>AUTOMATED CHECK 2 - A hypothetical automated check - SERIAL RUNNER</arg>
<arg>QA</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_NAME} ran in the ${TEST_ENVIRONMENT} environment..." | slacktee.sh -i :nerd_face: --plain-text --config ${SLACK_CONFIG_PATH}</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:45:40.047" level="INFO">Starting process:
echo "AUTOMATED CHECK 2 - A hypothetical automated check - SERIAL RUNNER ran in the QA environment..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:45:40.050" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:45:40.255" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:45:40.046" endtime="20191231 22:45:40.255"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:40.046" endtime="20191231 22:45:40.256"></status>
</kw>
<tags>
<tag>Check_Two</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:40.045" endtime="20191231 22:45:40.256" critical="yes"></status>
</test>
<status status="PASS" starttime="20191231 22:45:40.007" endtime="20191231 22:45:40.256"></status>
</suite>
<suite id="s1-s8" name="Robot Framework Desktop Web Browser Test Run">
<suite id="s1-s8-s1" name="Desktop-Example-Chrome" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Tests/Workshop-Part-Two/Desktop-Example-Chrome.robot">
<kw name="Open Chrome Browser To Specified URL" type="setup">
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${URL}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191231 22:45:50.733" level="INFO">Opening browser 'Chrome' to base url 'https://owasp-goat-app.herokuapp.com/login'.</msg>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20191231 22:45:50.751" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<status status="PASS" starttime="20191231 22:45:50.750" endtime="20191231 22:45:50.751"></status>
</kw>
<msg timestamp="20191231 22:45:50.757" level="FAIL">WebDriverException: Message: 'chromedriver' executable may have wrong permissions. Please see https://sites.google.com/a/chromium.org/chromedriver/home
</msg>
<status status="FAIL" starttime="20191231 22:45:50.733" endtime="20191231 22:45:50.757"></status>
</kw>
<status status="FAIL" starttime="20191231 22:45:50.732" endtime="20191231 22:45:50.757"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="teardown">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191231 22:45:50.760" endtime="20191231 22:45:50.761"></status>
</kw>
<test id="s1-s8-s1-t1" name="Go to the sign up page from the login page.">
<tags>
<tag>Desktop Chrome</tag>
</tags>
<status status="FAIL" starttime="20191231 22:45:50.758" endtime="20191231 22:45:50.758" critical="yes">Parent suite setup failed:
WebDriverException: Message: 'chromedriver' executable may have wrong permissions. Please see https://sites.google.com/a/chromium.org/chromedriver/home
</status>
</test>
<test id="s1-s8-s1-t2" name="Quickly check that the sign up page loaded.">
<tags>
<tag>Desktop Chrome</tag>
</tags>
<status status="FAIL" starttime="20191231 22:45:50.759" endtime="20191231 22:45:50.760" critical="yes">Parent suite setup failed:
WebDriverException: Message: 'chromedriver' executable may have wrong permissions. Please see https://sites.google.com/a/chromium.org/chromedriver/home
</status>
</test>
<doc>Simple example using SeleniumLibrary.</doc>
<status status="FAIL" starttime="20191231 22:45:50.567" endtime="20191231 22:45:50.761">Suite setup failed:
WebDriverException: Message: 'chromedriver' executable may have wrong permissions. Please see https://sites.google.com/a/chromium.org/chromedriver/home
</status>
</suite>
<suite id="s1-s8-s2" name="Desktop-Example-Firefox" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Tests/Workshop-Part-Two/Desktop-Example-Firefox.robot">
<kw name="Open Firefox Browser To Specified URL" type="setup">
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${URL}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191231 22:45:50.733" level="INFO">Opening browser 'Firefox' to base url 'https://owasp-goat-app.herokuapp.com/login'.</msg>
<msg timestamp="20191231 22:45:50.734" level="INFO">Firefox driver log is always forced to to: /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Workshop-Part-Three/pabot_results/Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox/geckodriver-1.log</msg>
<status status="PASS" starttime="20191231 22:45:50.733" endtime="20191231 22:45:54.707"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:54.707" endtime="20191231 22:45:54.710"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${RETRY_AMOUNT}x</arg>
<arg>0.1s</arg>
<arg>Wait Until Page Contains</arg>
<arg>Password</arg>
<arg>0.5s</arg>
</arguments>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<doc>Waits until ``text`` appears on the current page.</doc>
<arguments>
<arg>Password</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:54.711" endtime="20191231 22:45:54.723"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:54.711" endtime="20191231 22:45:54.723"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:54.723" endtime="20191231 22:45:54.726"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20191231 22:45:56.728" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20191231 22:45:54.726" endtime="20191231 22:45:56.728"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20191231 22:45:56.859" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-1.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20191231 22:45:56.728" endtime="20191231 22:45:56.859"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:50.732" endtime="20191231 22:45:56.860"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="teardown">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191231 22:45:59.308" endtime="20191231 22:46:01.947"></status>
</kw>
<test id="s1-s8-s2-t1" name="Go to the sign up page from the login page.">
<kw name="Click Sign Up Link" library="Selenium-Desktop-Resources">
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:56.861" endtime="20191231 22:45:56.864"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20191231 22:45:56.990" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-2.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-2.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20191231 22:45:56.864" endtime="20191231 22:45:56.990"></status>
</kw>
<kw name="Click Link" library="SeleniumLibrary">
<doc>Clicks a link identified by ``locator``.</doc>
<arguments>
<arg>//a[@href="/signup"]</arg>
</arguments>
<msg timestamp="20191231 22:45:56.991" level="INFO">Clicking link '//a[@href="/signup"]'.</msg>
<status status="PASS" starttime="20191231 22:45:56.990" endtime="20191231 22:45:57.144"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:56.861" endtime="20191231 22:45:57.144"></status>
</kw>
<tags>
<tag>Desktop Firefox</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:56.860" endtime="20191231 22:45:57.144" critical="yes"></status>
</test>
<test id="s1-s8-s2-t2" name="Quickly check that the sign up page loaded.">
<kw name="Check The Sign Up Page" library="Selenium-Desktop-Resources">
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:57.146" endtime="20191231 22:45:57.150"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${RETRY_AMOUNT}x</arg>
<arg>0.1 sec</arg>
<arg>Wait Until Page Contains</arg>
<arg>information</arg>
<arg>0.5s</arg>
</arguments>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<doc>Waits until ``text`` appears on the current page.</doc>
<arguments>
<arg>information</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:57.151" endtime="20191231 22:45:57.164"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:57.150" endtime="20191231 22:45:57.164"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:57.164" endtime="20191231 22:45:57.167"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20191231 22:45:59.169" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20191231 22:45:57.167" endtime="20191231 22:45:59.169"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20191231 22:45:59.307" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-3.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Firefox-selenium-screenshot-3.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20191231 22:45:59.169" endtime="20191231 22:45:59.307"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:57.146" endtime="20191231 22:45:59.307"></status>
</kw>
<tags>
<tag>Desktop Firefox</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:57.145" endtime="20191231 22:45:59.307" critical="yes"></status>
</test>
<doc>Simple example using SeleniumLibrary.</doc>
<status status="PASS" starttime="20191231 22:45:50.560" endtime="20191231 22:46:01.947"></status>
</suite>
<suite id="s1-s8-s3" name="Desktop-Example-Safari" source="/Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Tests/Workshop-Part-Two/Desktop-Example-Safari.robot">
<kw name="Open Safari Browser To Specified URL" type="setup">
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${URL}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191231 22:45:50.750" level="INFO">Opening browser 'Safari' to base url 'https://owasp-goat-app.herokuapp.com/login'.</msg>
<status status="PASS" starttime="20191231 22:45:50.749" endtime="20191231 22:45:53.071"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:53.072" endtime="20191231 22:45:53.075"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${RETRY_AMOUNT}x</arg>
<arg>0.1s</arg>
<arg>Wait Until Page Contains</arg>
<arg>Password</arg>
<arg>0.5s</arg>
</arguments>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<doc>Waits until ``text`` appears on the current page.</doc>
<arguments>
<arg>Password</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:53.076" endtime="20191231 22:45:53.082"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:53.076" endtime="20191231 22:45:53.083"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:53.083" endtime="20191231 22:45:53.085"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20191231 22:45:55.086" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20191231 22:45:53.085" endtime="20191231 22:45:55.086"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20191231 22:45:55.138" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-1.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20191231 22:45:55.086" endtime="20191231 22:45:55.138"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:50.749" endtime="20191231 22:45:55.139"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="teardown">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191231 22:46:15.453" endtime="20191231 22:46:15.470"></status>
</kw>
<test id="s1-s8-s3-t1" name="Go to the sign up page from the login page.">
<kw name="Click Sign Up Link" library="Selenium-Desktop-Resources">
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:55.140" endtime="20191231 22:45:55.142"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20191231 22:45:55.190" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-2.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-2.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20191231 22:45:55.142" endtime="20191231 22:45:55.190"></status>
</kw>
<kw name="Click Link" library="SeleniumLibrary">
<doc>Clicks a link identified by ``locator``.</doc>
<arguments>
<arg>//a[@href="/signup"]</arg>
</arguments>
<msg timestamp="20191231 22:45:55.190" level="INFO">Clicking link '//a[@href="/signup"]'.</msg>
<status status="PASS" starttime="20191231 22:45:55.190" endtime="20191231 22:45:55.216"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:55.139" endtime="20191231 22:45:55.216"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20191231 22:45:55.216" endtime="20191231 22:45:55.216"></status>
</kw>
<status status="PASS" starttime="20191231 22:45:55.216" endtime="20191231 22:45:55.216"></status>
</kw>
<tags>
<tag>Desktop Safari</tag>
</tags>
<status status="PASS" starttime="20191231 22:45:55.139" endtime="20191231 22:45:55.217" critical="yes"></status>
</test>
<test id="s1-s8-s3-t2" name="Quickly check that the sign up page loaded.">
<kw name="Check The Sign Up Page Demonstrate Failure">
<kw name="Page Should Contain" library="SeleniumLibrary">
<doc>Verifies that current page contains ``text``.</doc>
<arguments>
<arg>THIS SHOULD FAIL</arg>
</arguments>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20191231 22:46:15.228" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-3.png"&gt;&lt;img src="Robot Framework Desktop Web Browser Test Run.Desktop-Example-Safari-selenium-screenshot-3.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20191231 22:46:15.181" endtime="20191231 22:46:15.228"></status>
</kw>
<msg timestamp="20191231 22:46:15.234" level="FAIL">Page should have contained text 'THIS SHOULD FAIL' but did not.</msg>
<status status="FAIL" starttime="20191231 22:45:55.218" endtime="20191231 22:46:15.234"></status>
</kw>
<status status="FAIL" starttime="20191231 22:45:55.217" endtime="20191231 22:46:15.234"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email For Desktop Browser Check">
<arguments>
<arg>desktop Safari checks in the Desktop-Safari.robot file</arg>
<arg>Prod</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config ${EXECDIR}/Workshop-Examples/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20191231 22:46:15.237" level="INFO">Starting process:
echo "The desktop Safari checks in the Desktop-Safari.robot file failed in the Prod environment." | slacktee.sh -i :nerd_face: --plain-text --config /Users/jgorospe/Documents/GitHub/leon/packages/robotframework-test-assistant/robotframework-brain/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20191231 22:46:15.242" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20191231 22:46:15.449" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20191231 22:46:15.236" endtime="20191231 22:46:15.449"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20191231 22:46:15.450" endtime="20191231 22:46:15.450"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:15.235" endtime="20191231 22:46:15.450"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:15.235" endtime="20191231 22:46:15.450"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:15.235" endtime="20191231 22:46:15.451"></status>
</kw>
<status status="PASS" starttime="20191231 22:46:15.234" endtime="20191231 22:46:15.451"></status>
</kw>
<tags>
<tag>Desktop Safari</tag>
</tags>
<status status="FAIL" starttime="20191231 22:45:55.217" endtime="20191231 22:46:15.451" critical="yes">Page should have contained text 'THIS SHOULD FAIL' but did not.</status>
</test>
<doc>Simple example using SeleniumLibrary.</doc>
<status status="FAIL" starttime="20191231 22:45:50.556" endtime="20191231 22:46:15.470"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 3 executions.</doc>
<status status="FAIL" starttime="20191231 22:45:50.528" endtime="20191231 22:46:15.475"></status>
</suite>
<suite id="s1-s9" name="Robot Framework Web Browser In Docker Container Test Run" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Firefox.robot">
<kw name="Open Firefox Browser To Specified URL" type="setup">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Close All Browsers</arg>
</arguments>
<kw name="Close All Browsers" library="SeleniumLibrary">
<doc>Closes all open browsers and resets the browser cache.</doc>
<status status="PASS" starttime="20200101 03:50:11.985" endtime="20200101 03:50:11.985"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:11.985" endtime="20200101 03:50:11.985"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the given ``url``.</doc>
<arguments>
<arg>${URL}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200101 03:50:11.986" level="INFO">Opening browser 'Firefox' to base url 'https://owasp-goat-app.herokuapp.com/login'.</msg>
<status status="PASS" starttime="20200101 03:50:11.986" endtime="20200101 03:50:14.645"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:14.646" endtime="20200101 03:50:14.652"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${RETRY_AMOUNT}x</arg>
<arg>0.1s</arg>
<arg>Wait Until Page Contains</arg>
<arg>Password</arg>
<arg>0.25s</arg>
</arguments>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<doc>Waits until ``text`` appears on current page.</doc>
<arguments>
<arg>Password</arg>
<arg>0.25s</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:14.652" endtime="20200101 03:50:14.671"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:14.652" endtime="20200101 03:50:14.671"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:14.671" endtime="20200101 03:50:14.675"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20200101 03:50:16.678" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20200101 03:50:14.676" endtime="20200101 03:50:16.679"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes screenshot of the current page and embeds it into log file.</doc>
<msg timestamp="20200101 03:50:16.717" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="selenium-screenshot-1.png"&gt;&lt;img src="selenium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20200101 03:50:16.679" endtime="20200101 03:50:16.717"></status>
</kw>
<timeout value="1 minute"></timeout>
<status status="PASS" starttime="20200101 03:50:11.984" endtime="20200101 03:50:16.718"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="teardown">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200101 03:50:19.174" endtime="20200101 03:50:20.935"></status>
</kw>
<test id="s1-s9-t1" name="Go to the sign up page from the login page.">
<kw name="Click Sign Up Link">
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:16.719" endtime="20200101 03:50:16.722"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes screenshot of the current page and embeds it into log file.</doc>
<msg timestamp="20200101 03:50:16.804" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="selenium-screenshot-2.png"&gt;&lt;img src="selenium-screenshot-2.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20200101 03:50:16.723" endtime="20200101 03:50:16.805"></status>
</kw>
<kw name="Click Link" library="SeleniumLibrary">
<doc>Clicks a link identified by ``locator``.</doc>
<arguments>
<arg>//a[@href="/signup"]</arg>
</arguments>
<msg timestamp="20200101 03:50:16.805" level="INFO">Clicking link '//a[@href="/signup"]'.</msg>
<status status="PASS" starttime="20200101 03:50:16.805" endtime="20200101 03:50:17.075"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:16.719" endtime="20200101 03:50:17.075"></status>
</kw>
<tags>
<tag>Desktop Firefox</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" starttime="20200101 03:50:16.718" endtime="20200101 03:50:17.075" critical="yes"></status>
</test>
<test id="s1-s9-t2" name="Quickly check that the sign up page loaded.">
<kw name="Check The Sign Up Page">
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:17.078" endtime="20200101 03:50:17.084"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${RETRY_AMOUNT}x</arg>
<arg>0.1s</arg>
<arg>Wait Until Page Contains</arg>
<arg>information</arg>
<arg>0.5s</arg>
</arguments>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<doc>Waits until ``text`` appears on current page.</doc>
<arguments>
<arg>information</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:17.085" endtime="20200101 03:50:17.131"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:17.085" endtime="20200101 03:50:17.131"></status>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<doc>Sets the implicit wait value used by Selenium.</doc>
<arguments>
<arg>${SELENIUM_IMPLICIT_WAIT}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:17.131" endtime="20200101 03:50:17.136"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20200101 03:50:19.137" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20200101 03:50:17.136" endtime="20200101 03:50:19.137"></status>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes screenshot of the current page and embeds it into log file.</doc>
<msg timestamp="20200101 03:50:19.173" level="INFO" html="yes">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="selenium-screenshot-3.png"&gt;&lt;img src="selenium-screenshot-3.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20200101 03:50:19.138" endtime="20200101 03:50:19.173"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:17.077" endtime="20200101 03:50:19.173"></status>
</kw>
<tags>
<tag>Desktop Firefox</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" starttime="20200101 03:50:17.077" endtime="20200101 03:50:19.173" critical="yes"></status>
</test>
<doc>Simple example using SeleniumLibrary.</doc>
<status status="PASS" starttime="20200101 03:50:11.804" endtime="20200101 03:50:20.935"></status>
</suite>
<suite id="s1-s10" name="Robot Framework test run with user-created Python Library in parallel">
<suite id="s1-s10-s1" name="Docker-Example-Python-Library1-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library1-Enhanced-Version.robot">
<test id="s1-s10-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:29.557" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:27.226" endtime="20200101 03:50:29.557"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.558" endtime="20200101 03:50:29.558"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.559" endtime="20200101 03:50:29.559"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.559" endtime="20200101 03:50:29.560"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.560" endtime="20200101 03:50:29.561"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.561" endtime="20200101 03:50:29.562"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.562" endtime="20200101 03:50:29.563"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.563" endtime="20200101 03:50:29.564"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.565" endtime="20200101 03:50:29.566"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.566" endtime="20200101 03:50:29.566"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.567" endtime="20200101 03:50:29.567"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.567" endtime="20200101 03:50:29.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200101 03:50:29.568" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.568" endtime="20200101 03:50:29.568"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.569" endtime="20200101 03:50:29.569"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200101 03:50:29.570" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" starttime="20200101 03:50:29.569" endtime="20200101 03:50:29.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20200101 03:50:29.570" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.570" endtime="20200101 03:50:29.570"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.571" endtime="20200101 03:50:29.571"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:29.571" endtime="20200101 03:50:29.572"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:27.224" endtime="20200101 03:50:29.572" critical="yes"></status>
</test>
<test id="s1-s10-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:29.970" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.576" endtime="20200101 03:50:29.970"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.970" endtime="20200101 03:50:29.971"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.971" endtime="20200101 03:50:29.972"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.972" endtime="20200101 03:50:29.973"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.974" endtime="20200101 03:50:29.975"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.975" endtime="20200101 03:50:29.976"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.976" endtime="20200101 03:50:29.976"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.977" endtime="20200101 03:50:29.978"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.978" endtime="20200101 03:50:29.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.979" endtime="20200101 03:50:29.980"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.981" endtime="20200101 03:50:29.982"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.982" endtime="20200101 03:50:29.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:29.983" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.983" endtime="20200101 03:50:29.983"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.984" endtime="20200101 03:50:29.984"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.985" endtime="20200101 03:50:29.985"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:29.984" endtime="20200101 03:50:29.985"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:29.574" endtime="20200101 03:50:29.985" critical="yes"></status>
</test>
<test id="s1-s10-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:30.507" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.988" endtime="20200101 03:50:30.507"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.507" endtime="20200101 03:50:30.508"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.508" endtime="20200101 03:50:30.509"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.509" endtime="20200101 03:50:30.510"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.510" endtime="20200101 03:50:30.511"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.511" endtime="20200101 03:50:30.512"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.512" endtime="20200101 03:50:30.512"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.512" endtime="20200101 03:50:30.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:30.514" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:30.513" endtime="20200101 03:50:30.514"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200101 03:50:30.515" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200101 03:50:30.514" endtime="20200101 03:50:30.515"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.515" endtime="20200101 03:50:30.516"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:30.515" endtime="20200101 03:50:30.516"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:29.986" endtime="20200101 03:50:30.516" critical="yes"></status>
</test>
<test id="s1-s10-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:30.553" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:30.519" endtime="20200101 03:50:30.553"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.554" endtime="20200101 03:50:30.554"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.555" endtime="20200101 03:50:30.555"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.556" endtime="20200101 03:50:30.556"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.557" endtime="20200101 03:50:30.558"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.558" endtime="20200101 03:50:30.559"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.559" endtime="20200101 03:50:30.560"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.560" endtime="20200101 03:50:30.561"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.561" endtime="20200101 03:50:30.562"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.562" endtime="20200101 03:50:30.562"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.562" endtime="20200101 03:50:30.563"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.563" endtime="20200101 03:50:30.564"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:30.565" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200101 03:50:30.565" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200101 03:50:30.564" endtime="20200101 03:50:30.565"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200101 03:50:30.567" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200101 03:50:30.571" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200101 03:50:30.774" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200101 03:50:30.567" endtime="20200101 03:50:30.774"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200101 03:50:30.775" endtime="20200101 03:50:30.775"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:30.566" endtime="20200101 03:50:30.776"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:30.566" endtime="20200101 03:50:30.776"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:30.566" endtime="20200101 03:50:30.776"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:30.565" endtime="20200101 03:50:30.776"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200101 03:50:30.518" endtime="20200101 03:50:30.776" critical="yes">200 == 200</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" starttime="20200101 03:50:27.018" endtime="20200101 03:50:30.779"></status>
</suite>
<suite id="s1-s10-s2" name="Docker-Example-Python-Library2-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library2-Enhanced-Version.robot">
<test id="s1-s10-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:29.664" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:27.225" endtime="20200101 03:50:29.664"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.664" endtime="20200101 03:50:29.665"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.666" endtime="20200101 03:50:29.666"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.667" endtime="20200101 03:50:29.667"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.667" endtime="20200101 03:50:29.668"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.668" endtime="20200101 03:50:29.669"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.669" endtime="20200101 03:50:29.670"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.670" endtime="20200101 03:50:29.671"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.671" endtime="20200101 03:50:29.672"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.672" endtime="20200101 03:50:29.673"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.673" endtime="20200101 03:50:29.674"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.674" endtime="20200101 03:50:29.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:29.675" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.675" endtime="20200101 03:50:29.675"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.675" endtime="20200101 03:50:29.676"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.677" endtime="20200101 03:50:29.677"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:29.676" endtime="20200101 03:50:29.677"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:27.223" endtime="20200101 03:50:29.677" critical="yes"></status>
</test>
<test id="s1-s10-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:29.970" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.680" endtime="20200101 03:50:29.970"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.971" endtime="20200101 03:50:29.972"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.972" endtime="20200101 03:50:29.973"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.973" endtime="20200101 03:50:29.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.974" endtime="20200101 03:50:29.975"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.975" endtime="20200101 03:50:29.975"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.976" endtime="20200101 03:50:29.976"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.977" endtime="20200101 03:50:29.977"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.977" endtime="20200101 03:50:29.978"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.978" endtime="20200101 03:50:29.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.979" endtime="20200101 03:50:29.980"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.981" endtime="20200101 03:50:29.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:29.982" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.982" endtime="20200101 03:50:29.983"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.983" endtime="20200101 03:50:29.983"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200101 03:50:29.984" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" starttime="20200101 03:50:29.983" endtime="20200101 03:50:29.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20200101 03:50:29.984" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.984" endtime="20200101 03:50:29.985"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:29.985" endtime="20200101 03:50:29.985"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:29.985" endtime="20200101 03:50:29.986"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:29.679" endtime="20200101 03:50:29.986" critical="yes"></status>
</test>
<test id="s1-s10-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:30.346" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:29.988" endtime="20200101 03:50:30.346"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.346" endtime="20200101 03:50:30.347"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.348" endtime="20200101 03:50:30.349"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.349" endtime="20200101 03:50:30.350"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.350" endtime="20200101 03:50:30.351"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.351" endtime="20200101 03:50:30.351"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.352" endtime="20200101 03:50:30.352"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:30.352" endtime="20200101 03:50:30.353"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:30.354" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200101 03:50:30.354" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200101 03:50:30.353" endtime="20200101 03:50:30.354"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200101 03:50:30.357" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200101 03:50:30.362" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200101 03:50:31.071" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200101 03:50:30.357" endtime="20200101 03:50:31.072"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200101 03:50:31.072" endtime="20200101 03:50:31.073"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:30.356" endtime="20200101 03:50:31.073"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:30.356" endtime="20200101 03:50:31.073"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:30.356" endtime="20200101 03:50:31.073"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:30.355" endtime="20200101 03:50:31.073"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200101 03:50:29.987" endtime="20200101 03:50:31.074" critical="yes">200 == 200</status>
</test>
<test id="s1-s10-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:34.156" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:31.079" endtime="20200101 03:50:34.157"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.158" endtime="20200101 03:50:34.158"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.159" endtime="20200101 03:50:34.160"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.160" endtime="20200101 03:50:34.161"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.161" endtime="20200101 03:50:34.162"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.162" endtime="20200101 03:50:34.163"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.163" endtime="20200101 03:50:34.164"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.164" endtime="20200101 03:50:34.164"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.164" endtime="20200101 03:50:34.165"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.165" endtime="20200101 03:50:34.166"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.166" endtime="20200101 03:50:34.168"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.168" endtime="20200101 03:50:34.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:34.170" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:34.169" endtime="20200101 03:50:34.170"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.170" endtime="20200101 03:50:34.170"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.170" endtime="20200101 03:50:34.171"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:34.171" endtime="20200101 03:50:34.172"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:34.171" endtime="20200101 03:50:34.172"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:31.076" endtime="20200101 03:50:34.172" critical="yes"></status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" starttime="20200101 03:50:27.023" endtime="20200101 03:50:34.173"></status>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 2 executions.</doc>
<metadata>
<item name="Randomized">Suites and tests (seed 8040921226259248522)</item>
</metadata>
<status status="FAIL" starttime="20200101 03:50:26.984" endtime="20200101 03:50:34.178"></status>
</suite>
<suite id="s1-s11" name="Robot Framework test run with user-created Python Library one test at a time in serial random order">
<suite id="s1-s11-s1" name="Docker-Example-Python-Library1-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library1-Enhanced-Version.robot">
<test id="s1-s11-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:39.062" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:38.763" endtime="20200101 03:50:39.062"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.063" endtime="20200101 03:50:39.063"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.064" endtime="20200101 03:50:39.065"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.065" endtime="20200101 03:50:39.065"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.066" endtime="20200101 03:50:39.066"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.067" endtime="20200101 03:50:39.067"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.067" endtime="20200101 03:50:39.068"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.068" endtime="20200101 03:50:39.070"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.070" endtime="20200101 03:50:39.070"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.071" endtime="20200101 03:50:39.071"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.071" endtime="20200101 03:50:39.072"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.072" endtime="20200101 03:50:39.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:39.073" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.073" endtime="20200101 03:50:39.074"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.074" endtime="20200101 03:50:39.074"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.075" endtime="20200101 03:50:39.075"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.075" endtime="20200101 03:50:39.076"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:38.761" endtime="20200101 03:50:39.076" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s11-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:39.107" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.077" endtime="20200101 03:50:39.107"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.108" endtime="20200101 03:50:39.108"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.109" endtime="20200101 03:50:39.109"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.110" endtime="20200101 03:50:39.110"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.110" endtime="20200101 03:50:39.111"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.111" endtime="20200101 03:50:39.112"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.112" endtime="20200101 03:50:39.112"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.112" endtime="20200101 03:50:39.113"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.113" endtime="20200101 03:50:39.114"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.115" endtime="20200101 03:50:39.115"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.116" endtime="20200101 03:50:39.116"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.116" endtime="20200101 03:50:39.117"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:39.117" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200101 03:50:39.119" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200101 03:50:39.117" endtime="20200101 03:50:39.119"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200101 03:50:39.121" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200101 03:50:39.126" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200101 03:50:39.330" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200101 03:50:39.121" endtime="20200101 03:50:39.330"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200101 03:50:39.331" endtime="20200101 03:50:39.332"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.121" endtime="20200101 03:50:39.334"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.120" endtime="20200101 03:50:39.334"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.120" endtime="20200101 03:50:39.335"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.119" endtime="20200101 03:50:39.335"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200101 03:50:39.076" endtime="20200101 03:50:39.335" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: 200 == 200&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: 200 == 200</status>
</test>
<test id="s1-s11-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:39.559" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.338" endtime="20200101 03:50:39.559"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.560" endtime="20200101 03:50:39.560"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.561" endtime="20200101 03:50:39.561"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.562" endtime="20200101 03:50:39.562"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.562" endtime="20200101 03:50:39.563"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.563" endtime="20200101 03:50:39.564"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.564" endtime="20200101 03:50:39.565"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.565" endtime="20200101 03:50:39.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:39.567" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.566" endtime="20200101 03:50:39.567"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200101 03:50:39.568" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200101 03:50:39.567" endtime="20200101 03:50:39.568"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.569" endtime="20200101 03:50:39.569"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.568" endtime="20200101 03:50:39.569"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:39.337" endtime="20200101 03:50:39.569" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s11-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:38.745" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:38.529" endtime="20200101 03:50:38.745"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.746" endtime="20200101 03:50:38.747"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.747" endtime="20200101 03:50:38.748"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.748" endtime="20200101 03:50:38.749"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.749" endtime="20200101 03:50:38.750"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.750" endtime="20200101 03:50:38.751"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.751" endtime="20200101 03:50:38.751"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.752" endtime="20200101 03:50:38.752"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.752" endtime="20200101 03:50:38.753"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.753" endtime="20200101 03:50:38.754"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.754" endtime="20200101 03:50:38.754"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.755" endtime="20200101 03:50:38.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200101 03:50:38.756" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:38.755" endtime="20200101 03:50:38.756"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.757" endtime="20200101 03:50:38.757"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200101 03:50:38.758" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" starttime="20200101 03:50:38.757" endtime="20200101 03:50:38.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20200101 03:50:38.758" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:38.758" endtime="20200101 03:50:38.759"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.759" endtime="20200101 03:50:38.760"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:38.759" endtime="20200101 03:50:38.760"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:38.528" endtime="20200101 03:50:38.760" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1038"></status>
</suite>
<suite id="s1-s11-s2" name="Docker-Example-Python-Library2-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library2-Enhanced-Version.robot">
<test id="s1-s11-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:39.827" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.597" endtime="20200101 03:50:39.827"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.828" endtime="20200101 03:50:39.828"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.829" endtime="20200101 03:50:39.829"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.830" endtime="20200101 03:50:39.830"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.830" endtime="20200101 03:50:39.831"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.831" endtime="20200101 03:50:39.832"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.832" endtime="20200101 03:50:39.833"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.833" endtime="20200101 03:50:39.833"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.834" endtime="20200101 03:50:39.834"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.835" endtime="20200101 03:50:39.835"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.835" endtime="20200101 03:50:39.836"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.836" endtime="20200101 03:50:39.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:39.838" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.838" endtime="20200101 03:50:39.838"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.838" endtime="20200101 03:50:39.839"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200101 03:50:39.840" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" starttime="20200101 03:50:39.839" endtime="20200101 03:50:39.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20200101 03:50:39.840" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.840" endtime="20200101 03:50:39.840"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.841" endtime="20200101 03:50:39.841"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.841" endtime="20200101 03:50:39.842"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:39.596" endtime="20200101 03:50:39.842" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s11-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:40.287" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.844" endtime="20200101 03:50:40.287"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.287" endtime="20200101 03:50:40.288"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.288" endtime="20200101 03:50:40.288"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.289" endtime="20200101 03:50:40.289"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.289" endtime="20200101 03:50:40.290"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.290" endtime="20200101 03:50:40.291"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.291" endtime="20200101 03:50:40.292"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.292" endtime="20200101 03:50:40.292"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.293" endtime="20200101 03:50:40.293"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.293" endtime="20200101 03:50:40.293"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.294" endtime="20200101 03:50:40.294"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.294" endtime="20200101 03:50:40.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:40.295" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:40.295" endtime="20200101 03:50:40.295"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.295" endtime="20200101 03:50:40.296"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.296" endtime="20200101 03:50:40.297"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:40.296" endtime="20200101 03:50:40.297"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:39.843" endtime="20200101 03:50:40.297" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s11-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:40.329" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:40.299" endtime="20200101 03:50:40.329"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.329" endtime="20200101 03:50:40.330"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.330" endtime="20200101 03:50:40.331"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.332" endtime="20200101 03:50:40.332"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.332" endtime="20200101 03:50:40.333"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.333" endtime="20200101 03:50:40.334"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.334" endtime="20200101 03:50:40.335"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.335" endtime="20200101 03:50:40.335"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.335" endtime="20200101 03:50:40.336"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.336" endtime="20200101 03:50:40.337"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.337" endtime="20200101 03:50:40.337"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.337" endtime="20200101 03:50:40.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:40.338" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:40.338" endtime="20200101 03:50:40.338"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.339" endtime="20200101 03:50:40.339"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.339" endtime="20200101 03:50:40.340"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.341" endtime="20200101 03:50:40.341"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:40.340" endtime="20200101 03:50:40.341"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:40.298" endtime="20200101 03:50:40.342" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s11-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:41.008" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:40.343" endtime="20200101 03:50:41.008"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.008" endtime="20200101 03:50:41.009"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.010" endtime="20200101 03:50:41.011"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.011" endtime="20200101 03:50:41.011"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.012" endtime="20200101 03:50:41.012"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.013" endtime="20200101 03:50:41.013"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.013" endtime="20200101 03:50:41.014"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.015" endtime="20200101 03:50:41.015"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:41.016" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200101 03:50:41.016" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200101 03:50:41.015" endtime="20200101 03:50:41.016"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200101 03:50:41.020" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200101 03:50:41.026" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200101 03:50:41.229" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200101 03:50:41.019" endtime="20200101 03:50:41.230"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200101 03:50:41.231" endtime="20200101 03:50:41.232"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:41.019" endtime="20200101 03:50:41.232"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:41.018" endtime="20200101 03:50:41.233"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:41.017" endtime="20200101 03:50:41.233"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:41.017" endtime="20200101 03:50:41.233"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200101 03:50:40.342" endtime="20200101 03:50:41.233" critical="yes">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: 200 == 200&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: 200 == 200</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="1635"></status>
</suite>
<metadata>
<item name="Randomized">Suites and tests (seed 9182308762901621109)</item>
</metadata>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="2673"></status>
</suite>
<suite id="s1-s12" name="Robot Framework test run with user-created Python Library one test at a time in serial random order">
<suite id="s1-s12-s1" name="Docker-Example-Python-Library1-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library1-Enhanced-Version.robot">
<test id="s1-s12-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:38.745" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:38.529" endtime="20200101 03:50:38.745"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.746" endtime="20200101 03:50:38.747"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.747" endtime="20200101 03:50:38.748"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.748" endtime="20200101 03:50:38.749"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.749" endtime="20200101 03:50:38.750"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.750" endtime="20200101 03:50:38.751"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.751" endtime="20200101 03:50:38.751"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.752" endtime="20200101 03:50:38.752"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.752" endtime="20200101 03:50:38.753"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.753" endtime="20200101 03:50:38.754"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.754" endtime="20200101 03:50:38.754"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.755" endtime="20200101 03:50:38.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200101 03:50:38.756" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:38.755" endtime="20200101 03:50:38.756"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.757" endtime="20200101 03:50:38.757"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200101 03:50:38.758" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" starttime="20200101 03:50:38.757" endtime="20200101 03:50:38.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20200101 03:50:38.758" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:38.758" endtime="20200101 03:50:38.759"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:38.759" endtime="20200101 03:50:38.760"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:38.759" endtime="20200101 03:50:38.760"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:38.528" endtime="20200101 03:50:38.760" critical="yes"></status>
</test>
<test id="s1-s12-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:39.062" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:38.763" endtime="20200101 03:50:39.062"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.063" endtime="20200101 03:50:39.063"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.064" endtime="20200101 03:50:39.065"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.065" endtime="20200101 03:50:39.065"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.066" endtime="20200101 03:50:39.066"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.067" endtime="20200101 03:50:39.067"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.067" endtime="20200101 03:50:39.068"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.068" endtime="20200101 03:50:39.070"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.070" endtime="20200101 03:50:39.070"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.071" endtime="20200101 03:50:39.071"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.071" endtime="20200101 03:50:39.072"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.072" endtime="20200101 03:50:39.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:39.073" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.073" endtime="20200101 03:50:39.074"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.074" endtime="20200101 03:50:39.074"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.075" endtime="20200101 03:50:39.075"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.075" endtime="20200101 03:50:39.076"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:38.761" endtime="20200101 03:50:39.076" critical="yes"></status>
</test>
<test id="s1-s12-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:39.107" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.077" endtime="20200101 03:50:39.107"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.108" endtime="20200101 03:50:39.108"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.109" endtime="20200101 03:50:39.109"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.110" endtime="20200101 03:50:39.110"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.110" endtime="20200101 03:50:39.111"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.111" endtime="20200101 03:50:39.112"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.112" endtime="20200101 03:50:39.112"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.112" endtime="20200101 03:50:39.113"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.113" endtime="20200101 03:50:39.114"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.115" endtime="20200101 03:50:39.115"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.116" endtime="20200101 03:50:39.116"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.116" endtime="20200101 03:50:39.117"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:39.117" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200101 03:50:39.119" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200101 03:50:39.117" endtime="20200101 03:50:39.119"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200101 03:50:39.121" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200101 03:50:39.126" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200101 03:50:39.330" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200101 03:50:39.121" endtime="20200101 03:50:39.330"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200101 03:50:39.331" endtime="20200101 03:50:39.332"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.121" endtime="20200101 03:50:39.334"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.120" endtime="20200101 03:50:39.334"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.120" endtime="20200101 03:50:39.335"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.119" endtime="20200101 03:50:39.335"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200101 03:50:39.076" endtime="20200101 03:50:39.335" critical="yes">200 == 200</status>
</test>
<test id="s1-s12-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:39.559" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.338" endtime="20200101 03:50:39.559"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.560" endtime="20200101 03:50:39.560"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.561" endtime="20200101 03:50:39.561"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.562" endtime="20200101 03:50:39.562"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.562" endtime="20200101 03:50:39.563"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.563" endtime="20200101 03:50:39.564"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.564" endtime="20200101 03:50:39.565"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.565" endtime="20200101 03:50:39.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:39.567" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.566" endtime="20200101 03:50:39.567"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20200101 03:50:39.568" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200101 03:50:39.567" endtime="20200101 03:50:39.568"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.569" endtime="20200101 03:50:39.569"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.568" endtime="20200101 03:50:39.569"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:39.337" endtime="20200101 03:50:39.569" critical="yes"></status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" starttime="20200101 03:50:38.334" endtime="20200101 03:50:39.570"></status>
</suite>
<suite id="s1-s12-s2" name="Docker-Example-Python-Library2-Enhanced-Version" source="/rfw/Tests/Workshop-Part-Two/Docker-Example-Python-Library2-Enhanced-Version.robot">
<test id="s1-s12-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:39.827" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.597" endtime="20200101 03:50:39.827"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.828" endtime="20200101 03:50:39.828"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.829" endtime="20200101 03:50:39.829"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.830" endtime="20200101 03:50:39.830"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.830" endtime="20200101 03:50:39.831"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.831" endtime="20200101 03:50:39.832"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.832" endtime="20200101 03:50:39.833"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.833" endtime="20200101 03:50:39.833"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.834" endtime="20200101 03:50:39.834"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.835" endtime="20200101 03:50:39.835"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.835" endtime="20200101 03:50:39.836"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.836" endtime="20200101 03:50:39.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:39.838" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.838" endtime="20200101 03:50:39.838"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.838" endtime="20200101 03:50:39.839"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20200101 03:50:39.840" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" starttime="20200101 03:50:39.839" endtime="20200101 03:50:39.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20200101 03:50:39.840" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.840" endtime="20200101 03:50:39.840"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:39.841" endtime="20200101 03:50:39.841"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:39.841" endtime="20200101 03:50:39.842"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:39.596" endtime="20200101 03:50:39.842" critical="yes"></status>
</test>
<test id="s1-s12-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:40.287" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:39.844" endtime="20200101 03:50:40.287"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.287" endtime="20200101 03:50:40.288"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.288" endtime="20200101 03:50:40.288"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.289" endtime="20200101 03:50:40.289"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.289" endtime="20200101 03:50:40.290"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.290" endtime="20200101 03:50:40.291"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.291" endtime="20200101 03:50:40.292"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.292" endtime="20200101 03:50:40.292"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.293" endtime="20200101 03:50:40.293"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.293" endtime="20200101 03:50:40.293"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.294" endtime="20200101 03:50:40.294"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.294" endtime="20200101 03:50:40.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:40.295" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:40.295" endtime="20200101 03:50:40.295"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.295" endtime="20200101 03:50:40.296"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.296" endtime="20200101 03:50:40.297"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:40.296" endtime="20200101 03:50:40.297"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:39.843" endtime="20200101 03:50:40.297" critical="yes"></status>
</test>
<test id="s1-s12-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:40.329" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:40.299" endtime="20200101 03:50:40.329"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.329" endtime="20200101 03:50:40.330"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.330" endtime="20200101 03:50:40.331"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.332" endtime="20200101 03:50:40.332"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.332" endtime="20200101 03:50:40.333"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.333" endtime="20200101 03:50:40.334"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.334" endtime="20200101 03:50:40.335"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.335" endtime="20200101 03:50:40.335"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.335" endtime="20200101 03:50:40.336"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.336" endtime="20200101 03:50:40.337"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.337" endtime="20200101 03:50:40.337"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.337" endtime="20200101 03:50:40.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:40.338" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200101 03:50:40.338" endtime="20200101 03:50:40.338"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.339" endtime="20200101 03:50:40.339"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.339" endtime="20200101 03:50:40.340"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:40.341" endtime="20200101 03:50:40.341"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:40.340" endtime="20200101 03:50:40.341"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" starttime="20200101 03:50:40.298" endtime="20200101 03:50:40.342" critical="yes"></status>
</test>
<test id="s1-s12-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20200101 03:50:41.008" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200101 03:50:40.343" endtime="20200101 03:50:41.008"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.008" endtime="20200101 03:50:41.009"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.010" endtime="20200101 03:50:41.011"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.011" endtime="20200101 03:50:41.011"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.012" endtime="20200101 03:50:41.012"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.013" endtime="20200101 03:50:41.013"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.013" endtime="20200101 03:50:41.014"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" starttime="20200101 03:50:41.015" endtime="20200101 03:50:41.015"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200101 03:50:41.016" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200101 03:50:41.016" level="FAIL">200 == 200</msg>
<status status="FAIL" starttime="20200101 03:50:41.015" endtime="20200101 03:50:41.016"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200101 03:50:41.020" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the your_test_environment environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20200101 03:50:41.026" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200101 03:50:41.229" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200101 03:50:41.019" endtime="20200101 03:50:41.230"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" starttime="20200101 03:50:41.231" endtime="20200101 03:50:41.232"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:41.019" endtime="20200101 03:50:41.232"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:41.018" endtime="20200101 03:50:41.233"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:41.017" endtime="20200101 03:50:41.233"></status>
</kw>
<status status="PASS" starttime="20200101 03:50:41.017" endtime="20200101 03:50:41.233"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" starttime="20200101 03:50:40.342" endtime="20200101 03:50:41.233" critical="yes">200 == 200</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" starttime="20200101 03:50:39.572" endtime="20200101 03:50:41.236"></status>
</suite>
<status status="FAIL" starttime="20200101 03:50:38.304" endtime="20200101 03:50:41.241"></status>
</suite>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="49596"></status>
</suite>
<statistics>
<total>
<stat pass="36" fail="9">Critical Tests</stat>
<stat pass="36" fail="9">All Tests</stat>
</total>
<tag>
<stat pass="2" fail="0">Check_One</stat>
<stat pass="2" fail="0">Check_Three</stat>
<stat pass="2" fail="0">Check_Two</stat>
<stat pass="0" fail="2">Desktop Chrome</stat>
<stat pass="4" fail="0">Desktop Firefox</stat>
<stat pass="1" fail="1">Desktop Safari</stat>
<stat pass="2" fail="0">Group_One</stat>
<stat pass="2" fail="0">Group_Three</stat>
<stat pass="2" fail="0">Group_Two</stat>
<stat pass="18" fail="6">Regression_Tests</stat>
<stat pass="18" fail="6">Slightly_Refined_And_Room_For_Enhancements</stat>
<stat pass="1" fail="0">Start</stat>
</tag>
<suite>
<stat pass="36" fail="9" id="s1" name="Leon Robot Framework Assistant Combined Results Dashboard">Leon Robot Framework Assistant Combined Results Dashboard</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
